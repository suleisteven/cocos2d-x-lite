// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Basic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Basic_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenewMerchandise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenewMerchandise_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkinChooseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkinChooseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NickNameRandomRespone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NickNameRandomRespone_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchStartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchStartResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PLayerListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PLayerListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodChangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodChangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemainTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemainTimeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerOperationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerOperationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Food_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Food_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperRenewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperRenewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameReadyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UltimateSkillChooseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltimateSkillChooseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UltimateSkillChooseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltimateSkillChooseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRenewalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRenewalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRenewalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRenewalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Asylum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Asylum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackpackResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackpackResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkinMerchandise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkinMerchandise_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillMerchandise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillMerchandise_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopMerchandiseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopMerchandiseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChangedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChangedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UltimateSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UltimateSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivilegeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivilegeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Privilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Privilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthorizationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthorizationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthorizationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthorizationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayOrderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayOrderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayOrderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayOrderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayResultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayResultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayResultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayResultResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoldCoinListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoldCoinListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoldCoinListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoldCoinListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoldCoin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoldCoin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_2eproto() {
  protobuf_AddDesc_game_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game.proto");
  GOOGLE_CHECK(file != NULL);
  MessageInfo_descriptor_ = file->message_type(0);
  static const int MessageInfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, registerrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, registerresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, skinchooserequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, nicknamerandomrespone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, matchstartresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, playerlistresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, foodchangeresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, playeroperationrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, remaintimeresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, ranklistresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, gameendresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, gamestateresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, gamereadyrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, playerskillrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, playerskillresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, ultimateskillchooserequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, ultimateskillchooseresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, playerrenewalrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, playerrenewalresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, backpackresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, shopmerchandiseresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, buyrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, userchangedresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, privilegeresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, payorderrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, payorderresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, authorizationrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, authorizationresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, payresultrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, payresultresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, userinforesponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, goldcoinlistrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, goldcoinlistresponse_),
  };
  MessageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageInfo_descriptor_,
      MessageInfo::default_instance_,
      MessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageInfo));
  Basic_descriptor_ = file->message_type(1);
  static const int Basic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic, channel_),
  };
  Basic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Basic_descriptor_,
      Basic::default_instance_,
      Basic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Basic));
  RegisterRequest_descriptor_ = file->message_type(2);
  static const int RegisterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, userpayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, device_),
  };
  RegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRequest));
  RegisterResponse_descriptor_ = file->message_type(3);
  static const int RegisterResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, propoverdue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, signrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, renewmerchandise_),
  };
  RegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterResponse_descriptor_,
      RegisterResponse::default_instance_,
      RegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterResponse));
  RenewMerchandise_descriptor_ = file->message_type(4);
  static const int RenewMerchandise_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewMerchandise, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewMerchandise, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewMerchandise, price_),
  };
  RenewMerchandise_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenewMerchandise_descriptor_,
      RenewMerchandise::default_instance_,
      RenewMerchandise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewMerchandise, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewMerchandise, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenewMerchandise));
  SignReward_descriptor_ = file->message_type(5);
  static const int SignReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReward, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReward, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReward, status_),
  };
  SignReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignReward_descriptor_,
      SignReward::default_instance_,
      SignReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignReward));
  SkinChooseRequest_descriptor_ = file->message_type(6);
  static const int SkinChooseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinChooseRequest, skin_),
  };
  SkinChooseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkinChooseRequest_descriptor_,
      SkinChooseRequest::default_instance_,
      SkinChooseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinChooseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinChooseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkinChooseRequest));
  NickNameRandomRespone_descriptor_ = file->message_type(7);
  static const int NickNameRandomRespone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NickNameRandomRespone, nickname_),
  };
  NickNameRandomRespone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NickNameRandomRespone_descriptor_,
      NickNameRandomRespone::default_instance_,
      NickNameRandomRespone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NickNameRandomRespone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NickNameRandomRespone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NickNameRandomRespone));
  MatchStartResponse_descriptor_ = file->message_type(8);
  static const int MatchStartResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStartResponse, roominfo_),
  };
  MatchStartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchStartResponse_descriptor_,
      MatchStartResponse::default_instance_,
      MatchStartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchStartResponse));
  PLayerListResponse_descriptor_ = file->message_type(9);
  static const int PLayerListResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLayerListResponse, allplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLayerListResponse, removeplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLayerListResponse, newplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLayerListResponse, changeplayers_),
  };
  PLayerListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PLayerListResponse_descriptor_,
      PLayerListResponse::default_instance_,
      PLayerListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLayerListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PLayerListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PLayerListResponse));
  FoodChangeResponse_descriptor_ = file->message_type(10);
  static const int FoodChangeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodChangeResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodChangeResponse, foodareas_),
  };
  FoodChangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodChangeResponse_descriptor_,
      FoodChangeResponse::default_instance_,
      FoodChangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodChangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodChangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodChangeResponse));
  FoodArea_descriptor_ = file->message_type(11);
  static const int FoodArea_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, foods_),
  };
  FoodArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodArea_descriptor_,
      FoodArea::default_instance_,
      FoodArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodArea));
  RemainTimeResponse_descriptor_ = file->message_type(12);
  static const int RemainTimeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemainTimeResponse, remain_),
  };
  RemainTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemainTimeResponse_descriptor_,
      RemainTimeResponse::default_instance_,
      RemainTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemainTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemainTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemainTimeResponse));
  RankListResponse_descriptor_ = file->message_type(13);
  static const int RankListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankListResponse, rankitems_),
  };
  RankListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankListResponse_descriptor_,
      RankListResponse::default_instance_,
      RankListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankListResponse));
  GameEndResponse_descriptor_ = file->message_type(14);
  static const int GameEndResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResponse, rankitems_),
  };
  GameEndResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndResponse_descriptor_,
      GameEndResponse::default_instance_,
      GameEndResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndResponse));
  PlayerSkillRequest_descriptor_ = file->message_type(15);
  static const int PlayerSkillRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkillRequest, skill_),
  };
  PlayerSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSkillRequest_descriptor_,
      PlayerSkillRequest::default_instance_,
      PlayerSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSkillRequest));
  PlayerSkillResponse_descriptor_ = file->message_type(16);
  static const int PlayerSkillResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkillResponse, playerskills_),
  };
  PlayerSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSkillResponse_descriptor_,
      PlayerSkillResponse::default_instance_,
      PlayerSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSkillResponse));
  PlayerSkill_descriptor_ = file->message_type(17);
  static const int PlayerSkill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkill, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkill, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkill, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkill, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkill, duration_),
  };
  PlayerSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSkill_descriptor_,
      PlayerSkill::default_instance_,
      PlayerSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSkill));
  MapEntity_descriptor_ = file->message_type(18);
  static const int MapEntity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntity, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntity, value_),
  };
  MapEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapEntity_descriptor_,
      MapEntity::default_instance_,
      MapEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapEntity));
  RankItem_descriptor_ = file->message_type(19);
  static const int RankItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, reward_),
  };
  RankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankItem_descriptor_,
      RankItem::default_instance_,
      RankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankItem));
  CellVector_descriptor_ = file->message_type(20);
  static const int CellVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellVector, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellVector, angle_),
  };
  CellVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellVector_descriptor_,
      CellVector::default_instance_,
      CellVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellVector));
  PlayerOperationRequest_descriptor_ = file->message_type(21);
  static const int PlayerOperationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperationRequest, cellvector_),
  };
  PlayerOperationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerOperationRequest_descriptor_,
      PlayerOperationRequest::default_instance_,
      PlayerOperationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerOperationRequest));
  UserInfo_descriptor_ = file->message_type(22);
  static const int UserInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, skin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, ultimateskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, maxstamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, privilege_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  Food_descriptor_ = file->message_type(23);
  static const int Food_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, skin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, y_),
  };
  Food_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Food_descriptor_,
      Food::default_instance_,
      Food_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Food));
  Cell_descriptor_ = file->message_type(24);
  static const int Cell_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, mergeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, magnetfoods_),
  };
  Cell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cell));
  Player_descriptor_ = file->message_type(25);
  static const int Player_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, ultimateskillprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bekilleduserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, superrenewinfo_),
  };
  Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Player));
  SuperRenewInfo_descriptor_ = file->message_type(26);
  static const int SuperRenewInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRenewInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRenewInfo, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRenewInfo, percent_),
  };
  SuperRenewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperRenewInfo_descriptor_,
      SuperRenewInfo::default_instance_,
      SuperRenewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRenewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperRenewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperRenewInfo));
  RoomInfo_descriptor_ = file->message_type(27);
  static const int RoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, foodradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, foodareas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, rankitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, asylums_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  GameStateResponse_descriptor_ = file->message_type(28);
  static const int GameStateResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateResponse, roomid_),
  };
  GameStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStateResponse_descriptor_,
      GameStateResponse::default_instance_,
      GameStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStateResponse));
  GameReadyRequest_descriptor_ = file->message_type(29);
  static const int GameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyRequest, roomid_),
  };
  GameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameReadyRequest_descriptor_,
      GameReadyRequest::default_instance_,
      GameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameReadyRequest));
  UltimateSkillChooseRequest_descriptor_ = file->message_type(30);
  static const int UltimateSkillChooseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkillChooseRequest, ultimateskill_),
  };
  UltimateSkillChooseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UltimateSkillChooseRequest_descriptor_,
      UltimateSkillChooseRequest::default_instance_,
      UltimateSkillChooseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkillChooseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkillChooseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UltimateSkillChooseRequest));
  UltimateSkillChooseResponse_descriptor_ = file->message_type(31);
  static const int UltimateSkillChooseResponse_offsets_[1] = {
  };
  UltimateSkillChooseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UltimateSkillChooseResponse_descriptor_,
      UltimateSkillChooseResponse::default_instance_,
      UltimateSkillChooseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkillChooseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkillChooseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UltimateSkillChooseResponse));
  PlayerRenewalRequest_descriptor_ = file->message_type(32);
  static const int PlayerRenewalRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRenewalRequest, type_),
  };
  PlayerRenewalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRenewalRequest_descriptor_,
      PlayerRenewalRequest::default_instance_,
      PlayerRenewalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRenewalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRenewalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRenewalRequest));
  PlayerRenewalResponse_descriptor_ = file->message_type(33);
  static const int PlayerRenewalResponse_offsets_[1] = {
  };
  PlayerRenewalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRenewalResponse_descriptor_,
      PlayerRenewalResponse::default_instance_,
      PlayerRenewalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRenewalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRenewalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRenewalResponse));
  Asylum_descriptor_ = file->message_type(34);
  static const int Asylum_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asylum, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asylum, skin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asylum, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asylum, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asylum, radius_),
  };
  Asylum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Asylum_descriptor_,
      Asylum::default_instance_,
      Asylum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asylum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asylum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Asylum));
  Prop_descriptor_ = file->message_type(35);
  static const int Prop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, remainday_),
  };
  Prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Prop_descriptor_,
      Prop::default_instance_,
      Prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Prop));
  BackpackResponse_descriptor_ = file->message_type(36);
  static const int BackpackResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackResponse, skins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackResponse, skills_),
  };
  BackpackResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackpackResponse_descriptor_,
      BackpackResponse::default_instance_,
      BackpackResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackpackResponse));
  SkinMerchandise_descriptor_ = file->message_type(37);
  static const int SkinMerchandise_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, availabledays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, type_),
  };
  SkinMerchandise_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkinMerchandise_descriptor_,
      SkinMerchandise::default_instance_,
      SkinMerchandise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinMerchandise, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkinMerchandise));
  SkillMerchandise_descriptor_ = file->message_type(38);
  static const int SkillMerchandise_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, availabledays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, foodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, type_),
  };
  SkillMerchandise_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillMerchandise_descriptor_,
      SkillMerchandise::default_instance_,
      SkillMerchandise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillMerchandise, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillMerchandise));
  ShopMerchandiseResponse_descriptor_ = file->message_type(39);
  static const int ShopMerchandiseResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMerchandiseResponse, skinmerchandises_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMerchandiseResponse, skillmerchandises_),
  };
  ShopMerchandiseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopMerchandiseResponse_descriptor_,
      ShopMerchandiseResponse::default_instance_,
      ShopMerchandiseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMerchandiseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMerchandiseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopMerchandiseResponse));
  BuyRequest_descriptor_ = file->message_type(40);
  static const int BuyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRequest, id_),
  };
  BuyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyRequest_descriptor_,
      BuyRequest::default_instance_,
      BuyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyRequest));
  UserChangedResponse_descriptor_ = file->message_type(41);
  static const int UserChangedResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChangedResponse, userinfo_),
  };
  UserChangedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserChangedResponse_descriptor_,
      UserChangedResponse::default_instance_,
      UserChangedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChangedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChangedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserChangedResponse));
  UserInfoResponse_descriptor_ = file->message_type(42);
  static const int UserInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, userinfo_),
  };
  UserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoResponse_descriptor_,
      UserInfoResponse::default_instance_,
      UserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoResponse));
  UltimateSkill_descriptor_ = file->message_type(43);
  static const int UltimateSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkill, foodid_),
  };
  UltimateSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UltimateSkill_descriptor_,
      UltimateSkill::default_instance_,
      UltimateSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UltimateSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UltimateSkill));
  PrivilegeResponse_descriptor_ = file->message_type(44);
  static const int PrivilegeResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeResponse, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeResponse, countdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeResponse, privileges_),
  };
  PrivilegeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivilegeResponse_descriptor_,
      PrivilegeResponse::default_instance_,
      PrivilegeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivilegeResponse));
  Privilege_descriptor_ = file->message_type(45);
  static const int Privilege_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, orgprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, poster_),
  };
  Privilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Privilege_descriptor_,
      Privilege::default_instance_,
      Privilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Privilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Privilege));
  AuthorizationRequest_descriptor_ = file->message_type(46);
  static const int AuthorizationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizationRequest, userpayid_),
  };
  AuthorizationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthorizationRequest_descriptor_,
      AuthorizationRequest::default_instance_,
      AuthorizationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthorizationRequest));
  AuthorizationResponse_descriptor_ = file->message_type(47);
  static const int AuthorizationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizationResponse, userinfo_),
  };
  AuthorizationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthorizationResponse_descriptor_,
      AuthorizationResponse::default_instance_,
      AuthorizationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthorizationResponse));
  PayOrderRequest_descriptor_ = file->message_type(48);
  static const int PayOrderRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderRequest, goodsid_),
  };
  PayOrderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayOrderRequest_descriptor_,
      PayOrderRequest::default_instance_,
      PayOrderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayOrderRequest));
  PayOrderResponse_descriptor_ = file->message_type(49);
  static const int PayOrderResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderResponse, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderResponse, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderResponse, orderparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderResponse, continuetype_),
  };
  PayOrderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayOrderResponse_descriptor_,
      PayOrderResponse::default_instance_,
      PayOrderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayOrderResponse));
  OrderParam_descriptor_ = file->message_type(50);
  static const int OrderParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, unicomfeeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, unicomproductid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, alifeeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, weixinfeeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, notify_),
  };
  OrderParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderParam_descriptor_,
      OrderParam::default_instance_,
      OrderParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderParam));
  PayResultRequest_descriptor_ = file->message_type(51);
  static const int PayResultRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultRequest, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultRequest, orderstatus_),
  };
  PayResultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayResultRequest_descriptor_,
      PayResultRequest::default_instance_,
      PayResultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayResultRequest));
  PayResultResponse_descriptor_ = file->message_type(52);
  static const int PayResultResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultResponse, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultResponse, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultResponse, userinfo_),
  };
  PayResultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayResultResponse_descriptor_,
      PayResultResponse::default_instance_,
      PayResultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayResultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayResultResponse));
  GoldCoinListRequest_descriptor_ = file->message_type(53);
  static const int GoldCoinListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoinListRequest, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoinListRequest, limit_),
  };
  GoldCoinListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoldCoinListRequest_descriptor_,
      GoldCoinListRequest::default_instance_,
      GoldCoinListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoinListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoinListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoldCoinListRequest));
  GoldCoinListResponse_descriptor_ = file->message_type(54);
  static const int GoldCoinListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoinListResponse, goldcoin_),
  };
  GoldCoinListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoldCoinListResponse_descriptor_,
      GoldCoinListResponse::default_instance_,
      GoldCoinListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoinListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoinListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoldCoinListResponse));
  GoldCoin_descriptor_ = file->message_type(55);
  static const int GoldCoin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoin, canbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoin, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoin, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoin, poster_),
  };
  GoldCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoldCoin_descriptor_,
      GoldCoin::default_instance_,
      GoldCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoldCoin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageInfo_descriptor_, &MessageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Basic_descriptor_, &Basic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterResponse_descriptor_, &RegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenewMerchandise_descriptor_, &RenewMerchandise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignReward_descriptor_, &SignReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkinChooseRequest_descriptor_, &SkinChooseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NickNameRandomRespone_descriptor_, &NickNameRandomRespone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchStartResponse_descriptor_, &MatchStartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PLayerListResponse_descriptor_, &PLayerListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodChangeResponse_descriptor_, &FoodChangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodArea_descriptor_, &FoodArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemainTimeResponse_descriptor_, &RemainTimeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankListResponse_descriptor_, &RankListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndResponse_descriptor_, &GameEndResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSkillRequest_descriptor_, &PlayerSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSkillResponse_descriptor_, &PlayerSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSkill_descriptor_, &PlayerSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapEntity_descriptor_, &MapEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankItem_descriptor_, &RankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellVector_descriptor_, &CellVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerOperationRequest_descriptor_, &PlayerOperationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Food_descriptor_, &Food::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cell_descriptor_, &Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperRenewInfo_descriptor_, &SuperRenewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStateResponse_descriptor_, &GameStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameReadyRequest_descriptor_, &GameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UltimateSkillChooseRequest_descriptor_, &UltimateSkillChooseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UltimateSkillChooseResponse_descriptor_, &UltimateSkillChooseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRenewalRequest_descriptor_, &PlayerRenewalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRenewalResponse_descriptor_, &PlayerRenewalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Asylum_descriptor_, &Asylum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Prop_descriptor_, &Prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackpackResponse_descriptor_, &BackpackResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkinMerchandise_descriptor_, &SkinMerchandise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillMerchandise_descriptor_, &SkillMerchandise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopMerchandiseResponse_descriptor_, &ShopMerchandiseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyRequest_descriptor_, &BuyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserChangedResponse_descriptor_, &UserChangedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoResponse_descriptor_, &UserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UltimateSkill_descriptor_, &UltimateSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivilegeResponse_descriptor_, &PrivilegeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Privilege_descriptor_, &Privilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthorizationRequest_descriptor_, &AuthorizationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthorizationResponse_descriptor_, &AuthorizationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayOrderRequest_descriptor_, &PayOrderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayOrderResponse_descriptor_, &PayOrderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderParam_descriptor_, &OrderParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayResultRequest_descriptor_, &PayResultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayResultResponse_descriptor_, &PayResultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoldCoinListRequest_descriptor_, &GoldCoinListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoldCoinListResponse_descriptor_, &GoldCoinListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoldCoin_descriptor_, &GoldCoin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_2eproto() {
  delete MessageInfo::default_instance_;
  delete MessageInfo_reflection_;
  delete Basic::default_instance_;
  delete Basic_reflection_;
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterResponse::default_instance_;
  delete RegisterResponse_reflection_;
  delete RenewMerchandise::default_instance_;
  delete RenewMerchandise_reflection_;
  delete SignReward::default_instance_;
  delete SignReward_reflection_;
  delete SkinChooseRequest::default_instance_;
  delete SkinChooseRequest_reflection_;
  delete NickNameRandomRespone::default_instance_;
  delete NickNameRandomRespone_reflection_;
  delete MatchStartResponse::default_instance_;
  delete MatchStartResponse_reflection_;
  delete PLayerListResponse::default_instance_;
  delete PLayerListResponse_reflection_;
  delete FoodChangeResponse::default_instance_;
  delete FoodChangeResponse_reflection_;
  delete FoodArea::default_instance_;
  delete FoodArea_reflection_;
  delete RemainTimeResponse::default_instance_;
  delete RemainTimeResponse_reflection_;
  delete RankListResponse::default_instance_;
  delete RankListResponse_reflection_;
  delete GameEndResponse::default_instance_;
  delete GameEndResponse_reflection_;
  delete PlayerSkillRequest::default_instance_;
  delete PlayerSkillRequest_reflection_;
  delete PlayerSkillResponse::default_instance_;
  delete PlayerSkillResponse_reflection_;
  delete PlayerSkill::default_instance_;
  delete PlayerSkill_reflection_;
  delete MapEntity::default_instance_;
  delete MapEntity_reflection_;
  delete RankItem::default_instance_;
  delete RankItem_reflection_;
  delete CellVector::default_instance_;
  delete CellVector_reflection_;
  delete PlayerOperationRequest::default_instance_;
  delete PlayerOperationRequest_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete Food::default_instance_;
  delete Food_reflection_;
  delete Cell::default_instance_;
  delete Cell_reflection_;
  delete Player::default_instance_;
  delete Player_reflection_;
  delete SuperRenewInfo::default_instance_;
  delete SuperRenewInfo_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete GameStateResponse::default_instance_;
  delete GameStateResponse_reflection_;
  delete GameReadyRequest::default_instance_;
  delete GameReadyRequest_reflection_;
  delete UltimateSkillChooseRequest::default_instance_;
  delete UltimateSkillChooseRequest_reflection_;
  delete UltimateSkillChooseResponse::default_instance_;
  delete UltimateSkillChooseResponse_reflection_;
  delete PlayerRenewalRequest::default_instance_;
  delete PlayerRenewalRequest_reflection_;
  delete PlayerRenewalResponse::default_instance_;
  delete PlayerRenewalResponse_reflection_;
  delete Asylum::default_instance_;
  delete Asylum_reflection_;
  delete Prop::default_instance_;
  delete Prop_reflection_;
  delete BackpackResponse::default_instance_;
  delete BackpackResponse_reflection_;
  delete SkinMerchandise::default_instance_;
  delete SkinMerchandise_reflection_;
  delete SkillMerchandise::default_instance_;
  delete SkillMerchandise_reflection_;
  delete ShopMerchandiseResponse::default_instance_;
  delete ShopMerchandiseResponse_reflection_;
  delete BuyRequest::default_instance_;
  delete BuyRequest_reflection_;
  delete UserChangedResponse::default_instance_;
  delete UserChangedResponse_reflection_;
  delete UserInfoResponse::default_instance_;
  delete UserInfoResponse_reflection_;
  delete UltimateSkill::default_instance_;
  delete UltimateSkill_reflection_;
  delete PrivilegeResponse::default_instance_;
  delete PrivilegeResponse_reflection_;
  delete Privilege::default_instance_;
  delete Privilege_reflection_;
  delete AuthorizationRequest::default_instance_;
  delete AuthorizationRequest_reflection_;
  delete AuthorizationResponse::default_instance_;
  delete AuthorizationResponse_reflection_;
  delete PayOrderRequest::default_instance_;
  delete PayOrderRequest_reflection_;
  delete PayOrderResponse::default_instance_;
  delete PayOrderResponse_reflection_;
  delete OrderParam::default_instance_;
  delete OrderParam_reflection_;
  delete PayResultRequest::default_instance_;
  delete PayResultRequest_reflection_;
  delete PayResultResponse::default_instance_;
  delete PayResultResponse_reflection_;
  delete GoldCoinListRequest::default_instance_;
  delete GoldCoinListRequest_reflection_;
  delete GoldCoinListResponse::default_instance_;
  delete GoldCoinListResponse_reflection_;
  delete GoldCoin::default_instance_;
  delete GoldCoin_reflection_;
}

void protobuf_AddDesc_game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngame.proto\"\277\r\n\013MessageInfo\022\017\n\007service\030"
    "\001 \002(\005\022\n\n\002SN\030\002 \002(\005\022\014\n\004code\030\003 \001(\005\022\013\n\003msg\030\004"
    " \001(\t\022\025\n\005basic\030\034 \001(\0132\006.Basic\022)\n\017registerR"
    "equest\030\005 \001(\0132\020.RegisterRequest\022+\n\020regist"
    "erResponse\030\006 \001(\0132\021.RegisterResponse\022-\n\021s"
    "kinChooseRequest\030\007 \001(\0132\022.SkinChooseReque"
    "st\0225\n\025NickNameRandomRespone\030\010 \001(\0132\026.Nick"
    "NameRandomRespone\022/\n\022matchStartResponse\030"
    "\t \001(\0132\023.MatchStartResponse\022/\n\022pLayerList"
    "Response\030\n \001(\0132\023.PLayerListResponse\022/\n\022f"
    "oodChangeResponse\030\013 \001(\0132\023.FoodChangeResp"
    "onse\0227\n\026playerOperationRequest\030\014 \001(\0132\027.P"
    "layerOperationRequest\022/\n\022remainTimeRespo"
    "nse\030\r \001(\0132\023.RemainTimeResponse\022+\n\020rankLi"
    "stResponse\030\016 \001(\0132\021.RankListResponse\022)\n\017G"
    "ameEndResponse\030\017 \001(\0132\020.GameEndResponse\022-"
    "\n\021gameStateResponse\030\020 \001(\0132\022.GameStateRes"
    "ponse\022+\n\020gameReadyRequest\030\021 \001(\0132\021.GameRe"
    "adyRequest\022/\n\022playerSkillRequest\030\022 \001(\0132\023"
    ".PlayerSkillRequest\0221\n\023playerSkillRespon"
    "se\030\023 \001(\0132\024.PlayerSkillResponse\022\?\n\032Ultima"
    "teSkillChooseRequest\030\024 \001(\0132\033.UltimateSki"
    "llChooseRequest\022A\n\033UltimateSkillChooseRe"
    "sponse\030\025 \001(\0132\034.UltimateSkillChooseRespon"
    "se\0223\n\024playerRenewalRequest\030\026 \001(\0132\025.Playe"
    "rRenewalRequest\0225\n\025playerRenewalResponse"
    "\030\027 \001(\0132\026.PlayerRenewalResponse\022+\n\020backpa"
    "ckResponse\030\030 \001(\0132\021.BackpackResponse\0229\n\027s"
    "hopMerchandiseResponse\030\031 \001(\0132\030.ShopMerch"
    "andiseResponse\022\037\n\nbuyRequest\030\032 \001(\0132\013.Buy"
    "Request\0221\n\023userChangedResponse\030\033 \001(\0132\024.U"
    "serChangedResponse\022-\n\021privilegeResponse\030"
    "\035 \001(\0132\022.PrivilegeResponse\022)\n\017payOrderReq"
    "uest\030\036 \001(\0132\020.PayOrderRequest\022+\n\020payOrder"
    "Response\030\037 \001(\0132\021.PayOrderResponse\0223\n\024aut"
    "horizationRequest\030  \001(\0132\025.AuthorizationR"
    "equest\0225\n\025authorizationResponse\030$ \001(\0132\026."
    "AuthorizationResponse\022+\n\020payResultReques"
    "t\030! \001(\0132\021.PayResultRequest\022-\n\021PayResultR"
    "esponse\030\" \001(\0132\022.PayResultResponse\022+\n\020use"
    "rInfoResponse\030# \001(\0132\021.UserInfoResponse\0221"
    "\n\023goldCoinListRequest\030% \001(\0132\024.GoldCoinLi"
    "stRequest\0223\n\024goldCoinListResponse\030& \001(\0132"
    "\025.GoldCoinListResponse\"\030\n\005Basic\022\017\n\007chann"
    "el\030\001 \001(\t\"A\n\017RegisterRequest\022\013\n\003mac\030\001 \001(\t"
    "\022\021\n\tuserPayId\030\002 \001(\t\022\016\n\006device\030\003 \001(\t\"\223\001\n\020"
    "RegisterResponse\022\033\n\010userInfo\030\001 \002(\0132\t.Use"
    "rInfo\022\023\n\013propOverdue\030\002 \001(\005\022 \n\013signReward"
    "s\030\003 \003(\0132\013.SignReward\022+\n\020renewMerchandise"
    "\030\004 \001(\0132\021.RenewMerchandise\";\n\020RenewMercha"
    "ndise\022\n\n\002id\030\001 \002(\t\022\014\n\004gold\030\002 \001(\005\022\r\n\005price"
    "\030\003 \001(\005\"7\n\nSignReward\022\013\n\003day\030\001 \002(\005\022\014\n\004gol"
    "d\030\002 \002(\005\022\016\n\006status\030\003 \002(\005\"!\n\021SkinChooseReq"
    "uest\022\014\n\004skin\030\001 \002(\005\")\n\025NickNameRandomResp"
    "one\022\020\n\010nickname\030\001 \002(\t\"1\n\022MatchStartRespo"
    "nse\022\033\n\010roomInfo\030\001 \002(\0132\t.RoomInfo\"\216\001\n\022PLa"
    "yerListResponse\022\033\n\nallPlayers\030\001 \003(\0132\007.Pl"
    "ayer\022\036\n\rremovePlayers\030\002 \003(\0132\007.Player\022\033\n\n"
    "newPlayers\030\003 \003(\0132\007.Player\022\036\n\rchangePlaye"
    "rs\030\004 \003(\0132\007.Player\"@\n\022FoodChangeResponse\022"
    "\014\n\004type\030\001 \002(\005\022\034\n\tfoodAreas\030\002 \003(\0132\t.FoodA"
    "rea\"e\n\010FoodArea\022\016\n\006areaId\030\001 \001(\005\022\t\n\001x\030\002 \001"
    "(\005\022\t\n\001y\030\003 \001(\005\022\r\n\005width\030\004 \001(\005\022\016\n\006height\030\005"
    " \001(\005\022\024\n\005foods\030\006 \003(\0132\005.Food\"$\n\022RemainTime"
    "Response\022\016\n\006remain\030\001 \002(\005\"0\n\020RankListResp"
    "onse\022\034\n\trankItems\030\001 \003(\0132\t.RankItem\"/\n\017Ga"
    "meEndResponse\022\034\n\trankItems\030\001 \003(\0132\t.RankI"
    "tem\"#\n\022PlayerSkillRequest\022\r\n\005skill\030\001 \002(\005"
    "\"9\n\023PlayerSkillResponse\022\"\n\014playerSkills\030"
    "\001 \003(\0132\014.PlayerSkill\"o\n\013PlayerSkill\022\r\n\005sk"
    "ill\030\001 \001(\005\022\027\n\006player\030\002 \001(\0132\007.Player\022\r\n\005st"
    "ate\030\003 \001(\005\022\027\n\003map\030\004 \003(\0132\n.MapEntity\022\020\n\010du"
    "ration\030\005 \001(\005\"\'\n\tMapEntity\022\013\n\003key\030\001 \002(\t\022\r"
    "\n\005value\030\002 \002(\t\"U\n\010RankItem\022\014\n\004rank\030\001 \002(\005\022"
    "\033\n\010userInfo\030\002 \001(\0132\t.UserInfo\022\016\n\006weight\030\003"
    " \001(\005\022\016\n\006reward\030\004 \001(\005\"+\n\nCellVector\022\016\n\006ce"
    "llId\030\001 \002(\005\022\r\n\005angle\030\002 \001(\005\"9\n\026PlayerOpera"
    "tionRequest\022\037\n\ncellVector\030\001 \003(\0132\013.CellVe"
    "ctor\"\310\001\n\010UserInfo\022\013\n\003uid\030\001 \002(\005\022\014\n\004skin\030\002"
    " \001(\005\022\020\n\010nickname\030\003 \001(\t\022\017\n\007account\030\004 \001(\t\022"
    "%\n\rultimateSkill\030\005 \001(\0132\016.UltimateSkill\022\014"
    "\n\004gold\030\006 \001(\005\022\017\n\007stamina\030\007 \001(\005\022\022\n\nmaxStam"
    "ina\030\010 \001(\005\022\021\n\tcountdown\030\t \001(\005\022\021\n\tprivileg"
    "e\030\n \001(\005\"6\n\004Food\022\n\n\002id\030\001 \002(\005\022\014\n\004skin\030\002 \001("
    "\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\"\247\001\n\004Cell\022\n\n\002id\030\001"
    " \002(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\016\n\006radius\030\004 \001"
    "(\005\022\r\n\005speed\030\005 \001(\005\022\r\n\005angle\030\006 \001(\005\022\016\n\006from"
    "Id\030\007 \001(\005\022\017\n\007mergeId\030\010 \001(\005\022\016\n\006status\030\t \001("
    "\005\022\036\n\013magnetFoods\030\n \003(\0132\t.FoodArea\"\310\001\n\006Pl"
    "ayer\022\033\n\010userInfo\030\001 \002(\0132\t.UserInfo\022\016\n\006wei"
    "ght\030\002 \001(\005\022\024\n\005cells\030\003 \003(\0132\005.Cell\022\016\n\006statu"
    "s\030\004 \001(\005\022\035\n\025ultimateSkillProgress\030\005 \001(\005\022#"
    "\n\020beKilledUserInfo\030\006 \001(\0132\t.UserInfo\022\'\n\016s"
    "uperRenewInfo\030\007 \001(\0132\017.SuperRenewInfo\"\?\n\016"
    "SuperRenewInfo\022\014\n\004gold\030\001 \001(\005\022\016\n\006weight\030\002"
    " \001(\005\022\017\n\007percent\030\003 \001(\005\"\301\001\n\010RoomInfo\022\r\n\005wi"
    "dth\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\022\n\nremainTime\030"
    "\003 \001(\005\022\022\n\nfoodRadius\030\004 \001(\005\022\030\n\007players\030\005 \003"
    "(\0132\007.Player\022\034\n\tfoodAreas\030\006 \003(\0132\t.FoodAre"
    "a\022\034\n\trankItems\030\007 \003(\0132\t.RankItem\022\030\n\007asylu"
    "ms\030\010 \003(\0132\007.Asylum\"2\n\021GameStateResponse\022\r"
    "\n\005state\030\001 \002(\005\022\016\n\006roomId\030\002 \001(\t\"\"\n\020GameRea"
    "dyRequest\022\016\n\006roomId\030\001 \001(\t\"3\n\032UltimateSki"
    "llChooseRequest\022\025\n\rultimateSkill\030\001 \001(\005\"\035"
    "\n\033UltimateSkillChooseResponse\"$\n\024PlayerR"
    "enewalRequest\022\014\n\004type\030\001 \001(\005\"\027\n\025PlayerRen"
    "ewalResponse\"H\n\006Asylum\022\n\n\002id\030\001 \002(\005\022\014\n\004sk"
    "in\030\002 \001(\005\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\016\n\006radius"
    "\030\005 \001(\002\"%\n\004Prop\022\n\n\002id\030\001 \002(\005\022\021\n\tremainDay\030"
    "\002 \002(\005\"\?\n\020BackpackResponse\022\024\n\005skins\030\001 \003(\013"
    "2\005.Prop\022\025\n\006skills\030\002 \003(\0132\005.Prop\"\221\001\n\017SkinM"
    "erchandise\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\016\n\006"
    "propId\030\003 \002(\005\022\r\n\005price\030\004 \002(\005\022\025\n\ravailable"
    "Days\030\005 \002(\005\022\023\n\013description\030\006 \001(\t\022\013\n\003tag\030\007"
    " \001(\005\022\014\n\004type\030\010 \001(\005\"\225\001\n\020SkillMerchandise\022"
    "\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\016\n\006propId\030\003 \002("
    "\005\022\r\n\005price\030\004 \002(\005\022\025\n\ravailableDays\030\005 \002(\005\022"
    "\023\n\013description\030\006 \001(\t\022\016\n\006foodId\030\007 \001(\005\022\014\n\004"
    "type\030\010 \002(\005\"s\n\027ShopMerchandiseResponse\022*\n"
    "\020skinMerchandises\030\001 \003(\0132\020.SkinMerchandis"
    "e\022,\n\021skillMerchandises\030\002 \003(\0132\021.SkillMerc"
    "handise\"\030\n\nBuyRequest\022\n\n\002id\030\001 \002(\t\"2\n\023Use"
    "rChangedResponse\022\033\n\010userInfo\030\001 \002(\0132\t.Use"
    "rInfo\"/\n\020UserInfoResponse\022\033\n\010userInfo\030\001 "
    "\002(\0132\t.UserInfo\"+\n\rUltimateSkill\022\n\n\002id\030\001 "
    "\002(\005\022\016\n\006foodId\030\002 \001(\005\"e\n\021PrivilegeResponse"
    "\022\014\n\004type\030\001 \002(\005\022\017\n\007stamina\030\002 \001(\005\022\021\n\tcount"
    "down\030\003 \001(\005\022\036\n\nprivileges\030\004 \003(\0132\n.Privile"
    "ge\"\200\001\n\tPrivilege\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002"
    "(\t\022\014\n\004type\030\003 \002(\005\022\020\n\010orgPrice\030\004 \001(\005\022\r\n\005pr"
    "ice\030\005 \002(\005\022\014\n\004gold\030\006 \001(\005\022\014\n\004icon\030\007 \001(\005\022\016\n"
    "\006poster\030\010 \001(\t\")\n\024AuthorizationRequest\022\021\n"
    "\tuserPayId\030\001 \002(\t\"4\n\025AuthorizationRespons"
    "e\022\033\n\010userInfo\030\001 \002(\0132\t.UserInfo\"0\n\017PayOrd"
    "erRequest\022\014\n\004type\030\001 \002(\t\022\017\n\007goodsId\030\002 \002(\t"
    "\"i\n\020PayOrderResponse\022\017\n\007orderId\030\001 \002(\t\022\r\n"
    "\005price\030\002 \002(\005\022\037\n\norderParam\030\003 \002(\0132\013.Order"
    "Param\022\024\n\014continueType\030\004 \001(\005\"\177\n\nOrderPara"
    "m\022\014\n\004name\030\001 \001(\t\022\023\n\013unicomFeeId\030\002 \001(\t\022\027\n\017"
    "unicomProductId\030\003 \001(\t\022\020\n\010aliFeeId\030\004 \001(\t\022"
    "\023\n\013weixinFeeId\030\005 \001(\t\022\016\n\006notify\030\006 \001(\010\"F\n\020"
    "PayResultRequest\022\014\n\004type\030\001 \002(\t\022\017\n\007orderI"
    "d\030\002 \002(\t\022\023\n\013orderStatus\030\003 \002(\t\"V\n\021PayResul"
    "tResponse\022\017\n\007orderId\030\001 \002(\t\022\023\n\013orderStatu"
    "s\030\002 \002(\t\022\033\n\010userInfo\030\003 \001(\0132\t.UserInfo\"2\n\023"
    "GoldCoinListRequest\022\014\n\004page\030\001 \002(\005\022\r\n\005lim"
    "it\030\002 \002(\005\"3\n\024GoldCoinListResponse\022\033\n\010gold"
    "Coin\030\001 \003(\0132\t.GoldCoin\"S\n\010GoldCoin\022\n\n\002id\030"
    "\001 \002(\t\022\016\n\006canBuy\030\002 \002(\010\022\014\n\004gold\030\003 \001(\005\022\r\n\005p"
    "rice\030\004 \001(\005\022\016\n\006poster\030\006 \001(\t", 5986);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  MessageInfo::default_instance_ = new MessageInfo();
  Basic::default_instance_ = new Basic();
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterResponse::default_instance_ = new RegisterResponse();
  RenewMerchandise::default_instance_ = new RenewMerchandise();
  SignReward::default_instance_ = new SignReward();
  SkinChooseRequest::default_instance_ = new SkinChooseRequest();
  NickNameRandomRespone::default_instance_ = new NickNameRandomRespone();
  MatchStartResponse::default_instance_ = new MatchStartResponse();
  PLayerListResponse::default_instance_ = new PLayerListResponse();
  FoodChangeResponse::default_instance_ = new FoodChangeResponse();
  FoodArea::default_instance_ = new FoodArea();
  RemainTimeResponse::default_instance_ = new RemainTimeResponse();
  RankListResponse::default_instance_ = new RankListResponse();
  GameEndResponse::default_instance_ = new GameEndResponse();
  PlayerSkillRequest::default_instance_ = new PlayerSkillRequest();
  PlayerSkillResponse::default_instance_ = new PlayerSkillResponse();
  PlayerSkill::default_instance_ = new PlayerSkill();
  MapEntity::default_instance_ = new MapEntity();
  RankItem::default_instance_ = new RankItem();
  CellVector::default_instance_ = new CellVector();
  PlayerOperationRequest::default_instance_ = new PlayerOperationRequest();
  UserInfo::default_instance_ = new UserInfo();
  Food::default_instance_ = new Food();
  Cell::default_instance_ = new Cell();
  Player::default_instance_ = new Player();
  SuperRenewInfo::default_instance_ = new SuperRenewInfo();
  RoomInfo::default_instance_ = new RoomInfo();
  GameStateResponse::default_instance_ = new GameStateResponse();
  GameReadyRequest::default_instance_ = new GameReadyRequest();
  UltimateSkillChooseRequest::default_instance_ = new UltimateSkillChooseRequest();
  UltimateSkillChooseResponse::default_instance_ = new UltimateSkillChooseResponse();
  PlayerRenewalRequest::default_instance_ = new PlayerRenewalRequest();
  PlayerRenewalResponse::default_instance_ = new PlayerRenewalResponse();
  Asylum::default_instance_ = new Asylum();
  Prop::default_instance_ = new Prop();
  BackpackResponse::default_instance_ = new BackpackResponse();
  SkinMerchandise::default_instance_ = new SkinMerchandise();
  SkillMerchandise::default_instance_ = new SkillMerchandise();
  ShopMerchandiseResponse::default_instance_ = new ShopMerchandiseResponse();
  BuyRequest::default_instance_ = new BuyRequest();
  UserChangedResponse::default_instance_ = new UserChangedResponse();
  UserInfoResponse::default_instance_ = new UserInfoResponse();
  UltimateSkill::default_instance_ = new UltimateSkill();
  PrivilegeResponse::default_instance_ = new PrivilegeResponse();
  Privilege::default_instance_ = new Privilege();
  AuthorizationRequest::default_instance_ = new AuthorizationRequest();
  AuthorizationResponse::default_instance_ = new AuthorizationResponse();
  PayOrderRequest::default_instance_ = new PayOrderRequest();
  PayOrderResponse::default_instance_ = new PayOrderResponse();
  OrderParam::default_instance_ = new OrderParam();
  PayResultRequest::default_instance_ = new PayResultRequest();
  PayResultResponse::default_instance_ = new PayResultResponse();
  GoldCoinListRequest::default_instance_ = new GoldCoinListRequest();
  GoldCoinListResponse::default_instance_ = new GoldCoinListResponse();
  GoldCoin::default_instance_ = new GoldCoin();
  MessageInfo::default_instance_->InitAsDefaultInstance();
  Basic::default_instance_->InitAsDefaultInstance();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterResponse::default_instance_->InitAsDefaultInstance();
  RenewMerchandise::default_instance_->InitAsDefaultInstance();
  SignReward::default_instance_->InitAsDefaultInstance();
  SkinChooseRequest::default_instance_->InitAsDefaultInstance();
  NickNameRandomRespone::default_instance_->InitAsDefaultInstance();
  MatchStartResponse::default_instance_->InitAsDefaultInstance();
  PLayerListResponse::default_instance_->InitAsDefaultInstance();
  FoodChangeResponse::default_instance_->InitAsDefaultInstance();
  FoodArea::default_instance_->InitAsDefaultInstance();
  RemainTimeResponse::default_instance_->InitAsDefaultInstance();
  RankListResponse::default_instance_->InitAsDefaultInstance();
  GameEndResponse::default_instance_->InitAsDefaultInstance();
  PlayerSkillRequest::default_instance_->InitAsDefaultInstance();
  PlayerSkillResponse::default_instance_->InitAsDefaultInstance();
  PlayerSkill::default_instance_->InitAsDefaultInstance();
  MapEntity::default_instance_->InitAsDefaultInstance();
  RankItem::default_instance_->InitAsDefaultInstance();
  CellVector::default_instance_->InitAsDefaultInstance();
  PlayerOperationRequest::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  Food::default_instance_->InitAsDefaultInstance();
  Cell::default_instance_->InitAsDefaultInstance();
  Player::default_instance_->InitAsDefaultInstance();
  SuperRenewInfo::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  GameStateResponse::default_instance_->InitAsDefaultInstance();
  GameReadyRequest::default_instance_->InitAsDefaultInstance();
  UltimateSkillChooseRequest::default_instance_->InitAsDefaultInstance();
  UltimateSkillChooseResponse::default_instance_->InitAsDefaultInstance();
  PlayerRenewalRequest::default_instance_->InitAsDefaultInstance();
  PlayerRenewalResponse::default_instance_->InitAsDefaultInstance();
  Asylum::default_instance_->InitAsDefaultInstance();
  Prop::default_instance_->InitAsDefaultInstance();
  BackpackResponse::default_instance_->InitAsDefaultInstance();
  SkinMerchandise::default_instance_->InitAsDefaultInstance();
  SkillMerchandise::default_instance_->InitAsDefaultInstance();
  ShopMerchandiseResponse::default_instance_->InitAsDefaultInstance();
  BuyRequest::default_instance_->InitAsDefaultInstance();
  UserChangedResponse::default_instance_->InitAsDefaultInstance();
  UserInfoResponse::default_instance_->InitAsDefaultInstance();
  UltimateSkill::default_instance_->InitAsDefaultInstance();
  PrivilegeResponse::default_instance_->InitAsDefaultInstance();
  Privilege::default_instance_->InitAsDefaultInstance();
  AuthorizationRequest::default_instance_->InitAsDefaultInstance();
  AuthorizationResponse::default_instance_->InitAsDefaultInstance();
  PayOrderRequest::default_instance_->InitAsDefaultInstance();
  PayOrderResponse::default_instance_->InitAsDefaultInstance();
  OrderParam::default_instance_->InitAsDefaultInstance();
  PayResultRequest::default_instance_->InitAsDefaultInstance();
  PayResultResponse::default_instance_->InitAsDefaultInstance();
  GoldCoinListRequest::default_instance_->InitAsDefaultInstance();
  GoldCoinListResponse::default_instance_->InitAsDefaultInstance();
  GoldCoin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_2eproto {
  StaticDescriptorInitializer_game_2eproto() {
    protobuf_AddDesc_game_2eproto();
  }
} static_descriptor_initializer_game_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessageInfo::kServiceFieldNumber;
const int MessageInfo::kSNFieldNumber;
const int MessageInfo::kCodeFieldNumber;
const int MessageInfo::kMsgFieldNumber;
const int MessageInfo::kBasicFieldNumber;
const int MessageInfo::kRegisterRequestFieldNumber;
const int MessageInfo::kRegisterResponseFieldNumber;
const int MessageInfo::kSkinChooseRequestFieldNumber;
const int MessageInfo::kNickNameRandomResponeFieldNumber;
const int MessageInfo::kMatchStartResponseFieldNumber;
const int MessageInfo::kPLayerListResponseFieldNumber;
const int MessageInfo::kFoodChangeResponseFieldNumber;
const int MessageInfo::kPlayerOperationRequestFieldNumber;
const int MessageInfo::kRemainTimeResponseFieldNumber;
const int MessageInfo::kRankListResponseFieldNumber;
const int MessageInfo::kGameEndResponseFieldNumber;
const int MessageInfo::kGameStateResponseFieldNumber;
const int MessageInfo::kGameReadyRequestFieldNumber;
const int MessageInfo::kPlayerSkillRequestFieldNumber;
const int MessageInfo::kPlayerSkillResponseFieldNumber;
const int MessageInfo::kUltimateSkillChooseRequestFieldNumber;
const int MessageInfo::kUltimateSkillChooseResponseFieldNumber;
const int MessageInfo::kPlayerRenewalRequestFieldNumber;
const int MessageInfo::kPlayerRenewalResponseFieldNumber;
const int MessageInfo::kBackpackResponseFieldNumber;
const int MessageInfo::kShopMerchandiseResponseFieldNumber;
const int MessageInfo::kBuyRequestFieldNumber;
const int MessageInfo::kUserChangedResponseFieldNumber;
const int MessageInfo::kPrivilegeResponseFieldNumber;
const int MessageInfo::kPayOrderRequestFieldNumber;
const int MessageInfo::kPayOrderResponseFieldNumber;
const int MessageInfo::kAuthorizationRequestFieldNumber;
const int MessageInfo::kAuthorizationResponseFieldNumber;
const int MessageInfo::kPayResultRequestFieldNumber;
const int MessageInfo::kPayResultResponseFieldNumber;
const int MessageInfo::kUserInfoResponseFieldNumber;
const int MessageInfo::kGoldCoinListRequestFieldNumber;
const int MessageInfo::kGoldCoinListResponseFieldNumber;
#endif  // !_MSC_VER

MessageInfo::MessageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageInfo)
}

void MessageInfo::InitAsDefaultInstance() {
  basic_ = const_cast< ::Basic*>(&::Basic::default_instance());
  registerrequest_ = const_cast< ::RegisterRequest*>(&::RegisterRequest::default_instance());
  registerresponse_ = const_cast< ::RegisterResponse*>(&::RegisterResponse::default_instance());
  skinchooserequest_ = const_cast< ::SkinChooseRequest*>(&::SkinChooseRequest::default_instance());
  nicknamerandomrespone_ = const_cast< ::NickNameRandomRespone*>(&::NickNameRandomRespone::default_instance());
  matchstartresponse_ = const_cast< ::MatchStartResponse*>(&::MatchStartResponse::default_instance());
  playerlistresponse_ = const_cast< ::PLayerListResponse*>(&::PLayerListResponse::default_instance());
  foodchangeresponse_ = const_cast< ::FoodChangeResponse*>(&::FoodChangeResponse::default_instance());
  playeroperationrequest_ = const_cast< ::PlayerOperationRequest*>(&::PlayerOperationRequest::default_instance());
  remaintimeresponse_ = const_cast< ::RemainTimeResponse*>(&::RemainTimeResponse::default_instance());
  ranklistresponse_ = const_cast< ::RankListResponse*>(&::RankListResponse::default_instance());
  gameendresponse_ = const_cast< ::GameEndResponse*>(&::GameEndResponse::default_instance());
  gamestateresponse_ = const_cast< ::GameStateResponse*>(&::GameStateResponse::default_instance());
  gamereadyrequest_ = const_cast< ::GameReadyRequest*>(&::GameReadyRequest::default_instance());
  playerskillrequest_ = const_cast< ::PlayerSkillRequest*>(&::PlayerSkillRequest::default_instance());
  playerskillresponse_ = const_cast< ::PlayerSkillResponse*>(&::PlayerSkillResponse::default_instance());
  ultimateskillchooserequest_ = const_cast< ::UltimateSkillChooseRequest*>(&::UltimateSkillChooseRequest::default_instance());
  ultimateskillchooseresponse_ = const_cast< ::UltimateSkillChooseResponse*>(&::UltimateSkillChooseResponse::default_instance());
  playerrenewalrequest_ = const_cast< ::PlayerRenewalRequest*>(&::PlayerRenewalRequest::default_instance());
  playerrenewalresponse_ = const_cast< ::PlayerRenewalResponse*>(&::PlayerRenewalResponse::default_instance());
  backpackresponse_ = const_cast< ::BackpackResponse*>(&::BackpackResponse::default_instance());
  shopmerchandiseresponse_ = const_cast< ::ShopMerchandiseResponse*>(&::ShopMerchandiseResponse::default_instance());
  buyrequest_ = const_cast< ::BuyRequest*>(&::BuyRequest::default_instance());
  userchangedresponse_ = const_cast< ::UserChangedResponse*>(&::UserChangedResponse::default_instance());
  privilegeresponse_ = const_cast< ::PrivilegeResponse*>(&::PrivilegeResponse::default_instance());
  payorderrequest_ = const_cast< ::PayOrderRequest*>(&::PayOrderRequest::default_instance());
  payorderresponse_ = const_cast< ::PayOrderResponse*>(&::PayOrderResponse::default_instance());
  authorizationrequest_ = const_cast< ::AuthorizationRequest*>(&::AuthorizationRequest::default_instance());
  authorizationresponse_ = const_cast< ::AuthorizationResponse*>(&::AuthorizationResponse::default_instance());
  payresultrequest_ = const_cast< ::PayResultRequest*>(&::PayResultRequest::default_instance());
  payresultresponse_ = const_cast< ::PayResultResponse*>(&::PayResultResponse::default_instance());
  userinforesponse_ = const_cast< ::UserInfoResponse*>(&::UserInfoResponse::default_instance());
  goldcoinlistrequest_ = const_cast< ::GoldCoinListRequest*>(&::GoldCoinListRequest::default_instance());
  goldcoinlistresponse_ = const_cast< ::GoldCoinListResponse*>(&::GoldCoinListResponse::default_instance());
}

MessageInfo::MessageInfo(const MessageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageInfo)
}

void MessageInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_ = 0;
  sn_ = 0;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basic_ = NULL;
  registerrequest_ = NULL;
  registerresponse_ = NULL;
  skinchooserequest_ = NULL;
  nicknamerandomrespone_ = NULL;
  matchstartresponse_ = NULL;
  playerlistresponse_ = NULL;
  foodchangeresponse_ = NULL;
  playeroperationrequest_ = NULL;
  remaintimeresponse_ = NULL;
  ranklistresponse_ = NULL;
  gameendresponse_ = NULL;
  gamestateresponse_ = NULL;
  gamereadyrequest_ = NULL;
  playerskillrequest_ = NULL;
  playerskillresponse_ = NULL;
  ultimateskillchooserequest_ = NULL;
  ultimateskillchooseresponse_ = NULL;
  playerrenewalrequest_ = NULL;
  playerrenewalresponse_ = NULL;
  backpackresponse_ = NULL;
  shopmerchandiseresponse_ = NULL;
  buyrequest_ = NULL;
  userchangedresponse_ = NULL;
  privilegeresponse_ = NULL;
  payorderrequest_ = NULL;
  payorderresponse_ = NULL;
  authorizationrequest_ = NULL;
  authorizationresponse_ = NULL;
  payresultrequest_ = NULL;
  payresultresponse_ = NULL;
  userinforesponse_ = NULL;
  goldcoinlistrequest_ = NULL;
  goldcoinlistresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:MessageInfo)
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete basic_;
    delete registerrequest_;
    delete registerresponse_;
    delete skinchooserequest_;
    delete nicknamerandomrespone_;
    delete matchstartresponse_;
    delete playerlistresponse_;
    delete foodchangeresponse_;
    delete playeroperationrequest_;
    delete remaintimeresponse_;
    delete ranklistresponse_;
    delete gameendresponse_;
    delete gamestateresponse_;
    delete gamereadyrequest_;
    delete playerskillrequest_;
    delete playerskillresponse_;
    delete ultimateskillchooserequest_;
    delete ultimateskillchooseresponse_;
    delete playerrenewalrequest_;
    delete playerrenewalresponse_;
    delete backpackresponse_;
    delete shopmerchandiseresponse_;
    delete buyrequest_;
    delete userchangedresponse_;
    delete privilegeresponse_;
    delete payorderrequest_;
    delete payorderresponse_;
    delete authorizationrequest_;
    delete authorizationresponse_;
    delete payresultrequest_;
    delete payresultresponse_;
    delete userinforesponse_;
    delete goldcoinlistrequest_;
    delete goldcoinlistresponse_;
  }
}

void MessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageInfo_descriptor_;
}

const MessageInfo& MessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

MessageInfo* MessageInfo::default_instance_ = NULL;

MessageInfo* MessageInfo::New() const {
  return new MessageInfo;
}

void MessageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(service_, sn_);
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
    if (has_basic()) {
      if (basic_ != NULL) basic_->::Basic::Clear();
    }
    if (has_registerrequest()) {
      if (registerrequest_ != NULL) registerrequest_->::RegisterRequest::Clear();
    }
    if (has_registerresponse()) {
      if (registerresponse_ != NULL) registerresponse_->::RegisterResponse::Clear();
    }
    if (has_skinchooserequest()) {
      if (skinchooserequest_ != NULL) skinchooserequest_->::SkinChooseRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_nicknamerandomrespone()) {
      if (nicknamerandomrespone_ != NULL) nicknamerandomrespone_->::NickNameRandomRespone::Clear();
    }
    if (has_matchstartresponse()) {
      if (matchstartresponse_ != NULL) matchstartresponse_->::MatchStartResponse::Clear();
    }
    if (has_playerlistresponse()) {
      if (playerlistresponse_ != NULL) playerlistresponse_->::PLayerListResponse::Clear();
    }
    if (has_foodchangeresponse()) {
      if (foodchangeresponse_ != NULL) foodchangeresponse_->::FoodChangeResponse::Clear();
    }
    if (has_playeroperationrequest()) {
      if (playeroperationrequest_ != NULL) playeroperationrequest_->::PlayerOperationRequest::Clear();
    }
    if (has_remaintimeresponse()) {
      if (remaintimeresponse_ != NULL) remaintimeresponse_->::RemainTimeResponse::Clear();
    }
    if (has_ranklistresponse()) {
      if (ranklistresponse_ != NULL) ranklistresponse_->::RankListResponse::Clear();
    }
    if (has_gameendresponse()) {
      if (gameendresponse_ != NULL) gameendresponse_->::GameEndResponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_gamestateresponse()) {
      if (gamestateresponse_ != NULL) gamestateresponse_->::GameStateResponse::Clear();
    }
    if (has_gamereadyrequest()) {
      if (gamereadyrequest_ != NULL) gamereadyrequest_->::GameReadyRequest::Clear();
    }
    if (has_playerskillrequest()) {
      if (playerskillrequest_ != NULL) playerskillrequest_->::PlayerSkillRequest::Clear();
    }
    if (has_playerskillresponse()) {
      if (playerskillresponse_ != NULL) playerskillresponse_->::PlayerSkillResponse::Clear();
    }
    if (has_ultimateskillchooserequest()) {
      if (ultimateskillchooserequest_ != NULL) ultimateskillchooserequest_->::UltimateSkillChooseRequest::Clear();
    }
    if (has_ultimateskillchooseresponse()) {
      if (ultimateskillchooseresponse_ != NULL) ultimateskillchooseresponse_->::UltimateSkillChooseResponse::Clear();
    }
    if (has_playerrenewalrequest()) {
      if (playerrenewalrequest_ != NULL) playerrenewalrequest_->::PlayerRenewalRequest::Clear();
    }
    if (has_playerrenewalresponse()) {
      if (playerrenewalresponse_ != NULL) playerrenewalresponse_->::PlayerRenewalResponse::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_backpackresponse()) {
      if (backpackresponse_ != NULL) backpackresponse_->::BackpackResponse::Clear();
    }
    if (has_shopmerchandiseresponse()) {
      if (shopmerchandiseresponse_ != NULL) shopmerchandiseresponse_->::ShopMerchandiseResponse::Clear();
    }
    if (has_buyrequest()) {
      if (buyrequest_ != NULL) buyrequest_->::BuyRequest::Clear();
    }
    if (has_userchangedresponse()) {
      if (userchangedresponse_ != NULL) userchangedresponse_->::UserChangedResponse::Clear();
    }
    if (has_privilegeresponse()) {
      if (privilegeresponse_ != NULL) privilegeresponse_->::PrivilegeResponse::Clear();
    }
    if (has_payorderrequest()) {
      if (payorderrequest_ != NULL) payorderrequest_->::PayOrderRequest::Clear();
    }
    if (has_payorderresponse()) {
      if (payorderresponse_ != NULL) payorderresponse_->::PayOrderResponse::Clear();
    }
    if (has_authorizationrequest()) {
      if (authorizationrequest_ != NULL) authorizationrequest_->::AuthorizationRequest::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 63) {
    if (has_authorizationresponse()) {
      if (authorizationresponse_ != NULL) authorizationresponse_->::AuthorizationResponse::Clear();
    }
    if (has_payresultrequest()) {
      if (payresultrequest_ != NULL) payresultrequest_->::PayResultRequest::Clear();
    }
    if (has_payresultresponse()) {
      if (payresultresponse_ != NULL) payresultresponse_->::PayResultResponse::Clear();
    }
    if (has_userinforesponse()) {
      if (userinforesponse_ != NULL) userinforesponse_->::UserInfoResponse::Clear();
    }
    if (has_goldcoinlistrequest()) {
      if (goldcoinlistrequest_ != NULL) goldcoinlistrequest_->::GoldCoinListRequest::Clear();
    }
    if (has_goldcoinlistresponse()) {
      if (goldcoinlistresponse_ != NULL) goldcoinlistresponse_->::GoldCoinListResponse::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 service = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_)));
          set_has_service();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SN;
        break;
      }

      // required int32 SN = 2;
      case 2: {
        if (tag == 16) {
         parse_SN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sn_)));
          set_has_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3;
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_registerRequest;
        break;
      }

      // optional .RegisterRequest registerRequest = 5;
      case 5: {
        if (tag == 42) {
         parse_registerRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_registerResponse;
        break;
      }

      // optional .RegisterResponse registerResponse = 6;
      case 6: {
        if (tag == 50) {
         parse_registerResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_skinChooseRequest;
        break;
      }

      // optional .SkinChooseRequest skinChooseRequest = 7;
      case 7: {
        if (tag == 58) {
         parse_skinChooseRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skinchooserequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_NickNameRandomRespone;
        break;
      }

      // optional .NickNameRandomRespone NickNameRandomRespone = 8;
      case 8: {
        if (tag == 66) {
         parse_NickNameRandomRespone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nicknamerandomrespone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_matchStartResponse;
        break;
      }

      // optional .MatchStartResponse matchStartResponse = 9;
      case 9: {
        if (tag == 74) {
         parse_matchStartResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchstartresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pLayerListResponse;
        break;
      }

      // optional .PLayerListResponse pLayerListResponse = 10;
      case 10: {
        if (tag == 82) {
         parse_pLayerListResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlistresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_foodChangeResponse;
        break;
      }

      // optional .FoodChangeResponse foodChangeResponse = 11;
      case 11: {
        if (tag == 90) {
         parse_foodChangeResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foodchangeresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_playerOperationRequest;
        break;
      }

      // optional .PlayerOperationRequest playerOperationRequest = 12;
      case 12: {
        if (tag == 98) {
         parse_playerOperationRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeroperationrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_remainTimeResponse;
        break;
      }

      // optional .RemainTimeResponse remainTimeResponse = 13;
      case 13: {
        if (tag == 106) {
         parse_remainTimeResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remaintimeresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_rankListResponse;
        break;
      }

      // optional .RankListResponse rankListResponse = 14;
      case 14: {
        if (tag == 114) {
         parse_rankListResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranklistresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_GameEndResponse;
        break;
      }

      // optional .GameEndResponse GameEndResponse = 15;
      case 15: {
        if (tag == 122) {
         parse_GameEndResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameendresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_gameStateResponse;
        break;
      }

      // optional .GameStateResponse gameStateResponse = 16;
      case 16: {
        if (tag == 130) {
         parse_gameStateResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestateresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_gameReadyRequest;
        break;
      }

      // optional .GameReadyRequest gameReadyRequest = 17;
      case 17: {
        if (tag == 138) {
         parse_gameReadyRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamereadyrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_playerSkillRequest;
        break;
      }

      // optional .PlayerSkillRequest playerSkillRequest = 18;
      case 18: {
        if (tag == 146) {
         parse_playerSkillRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerskillrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_playerSkillResponse;
        break;
      }

      // optional .PlayerSkillResponse playerSkillResponse = 19;
      case 19: {
        if (tag == 154) {
         parse_playerSkillResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerskillresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_UltimateSkillChooseRequest;
        break;
      }

      // optional .UltimateSkillChooseRequest UltimateSkillChooseRequest = 20;
      case 20: {
        if (tag == 162) {
         parse_UltimateSkillChooseRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ultimateskillchooserequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_UltimateSkillChooseResponse;
        break;
      }

      // optional .UltimateSkillChooseResponse UltimateSkillChooseResponse = 21;
      case 21: {
        if (tag == 170) {
         parse_UltimateSkillChooseResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ultimateskillchooseresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_playerRenewalRequest;
        break;
      }

      // optional .PlayerRenewalRequest playerRenewalRequest = 22;
      case 22: {
        if (tag == 178) {
         parse_playerRenewalRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrenewalrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_playerRenewalResponse;
        break;
      }

      // optional .PlayerRenewalResponse playerRenewalResponse = 23;
      case 23: {
        if (tag == 186) {
         parse_playerRenewalResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrenewalresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_backpackResponse;
        break;
      }

      // optional .BackpackResponse backpackResponse = 24;
      case 24: {
        if (tag == 194) {
         parse_backpackResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backpackresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_shopMerchandiseResponse;
        break;
      }

      // optional .ShopMerchandiseResponse shopMerchandiseResponse = 25;
      case 25: {
        if (tag == 202) {
         parse_shopMerchandiseResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopmerchandiseresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_buyRequest;
        break;
      }

      // optional .BuyRequest buyRequest = 26;
      case 26: {
        if (tag == 210) {
         parse_buyRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_userChangedResponse;
        break;
      }

      // optional .UserChangedResponse userChangedResponse = 27;
      case 27: {
        if (tag == 218) {
         parse_userChangedResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userchangedresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_basic;
        break;
      }

      // optional .Basic basic = 28;
      case 28: {
        if (tag == 226) {
         parse_basic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_privilegeResponse;
        break;
      }

      // optional .PrivilegeResponse privilegeResponse = 29;
      case 29: {
        if (tag == 234) {
         parse_privilegeResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilegeresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_payOrderRequest;
        break;
      }

      // optional .PayOrderRequest payOrderRequest = 30;
      case 30: {
        if (tag == 242) {
         parse_payOrderRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payorderrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_payOrderResponse;
        break;
      }

      // optional .PayOrderResponse payOrderResponse = 31;
      case 31: {
        if (tag == 250) {
         parse_payOrderResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payorderresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_authorizationRequest;
        break;
      }

      // optional .AuthorizationRequest authorizationRequest = 32;
      case 32: {
        if (tag == 258) {
         parse_authorizationRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authorizationrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_payResultRequest;
        break;
      }

      // optional .PayResultRequest payResultRequest = 33;
      case 33: {
        if (tag == 266) {
         parse_payResultRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payresultrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_PayResultResponse;
        break;
      }

      // optional .PayResultResponse PayResultResponse = 34;
      case 34: {
        if (tag == 274) {
         parse_PayResultResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payresultresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_userInfoResponse;
        break;
      }

      // optional .UserInfoResponse userInfoResponse = 35;
      case 35: {
        if (tag == 282) {
         parse_userInfoResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinforesponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_authorizationResponse;
        break;
      }

      // optional .AuthorizationResponse authorizationResponse = 36;
      case 36: {
        if (tag == 290) {
         parse_authorizationResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authorizationresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_goldCoinListRequest;
        break;
      }

      // optional .GoldCoinListRequest goldCoinListRequest = 37;
      case 37: {
        if (tag == 298) {
         parse_goldCoinListRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goldcoinlistrequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_goldCoinListResponse;
        break;
      }

      // optional .GoldCoinListResponse goldCoinListResponse = 38;
      case 38: {
        if (tag == 306) {
         parse_goldCoinListResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goldcoinlistresponse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageInfo)
  return false;
#undef DO_
}

void MessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageInfo)
  // required int32 service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->service(), output);
  }

  // required int32 SN = 2;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sn(), output);
  }

  // optional int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  // optional .RegisterRequest registerRequest = 5;
  if (has_registerrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->registerrequest(), output);
  }

  // optional .RegisterResponse registerResponse = 6;
  if (has_registerresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->registerresponse(), output);
  }

  // optional .SkinChooseRequest skinChooseRequest = 7;
  if (has_skinchooserequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skinchooserequest(), output);
  }

  // optional .NickNameRandomRespone NickNameRandomRespone = 8;
  if (has_nicknamerandomrespone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->nicknamerandomrespone(), output);
  }

  // optional .MatchStartResponse matchStartResponse = 9;
  if (has_matchstartresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->matchstartresponse(), output);
  }

  // optional .PLayerListResponse pLayerListResponse = 10;
  if (has_playerlistresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->playerlistresponse(), output);
  }

  // optional .FoodChangeResponse foodChangeResponse = 11;
  if (has_foodchangeresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->foodchangeresponse(), output);
  }

  // optional .PlayerOperationRequest playerOperationRequest = 12;
  if (has_playeroperationrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->playeroperationrequest(), output);
  }

  // optional .RemainTimeResponse remainTimeResponse = 13;
  if (has_remaintimeresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->remaintimeresponse(), output);
  }

  // optional .RankListResponse rankListResponse = 14;
  if (has_ranklistresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ranklistresponse(), output);
  }

  // optional .GameEndResponse GameEndResponse = 15;
  if (has_gameendresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->gameendresponse(), output);
  }

  // optional .GameStateResponse gameStateResponse = 16;
  if (has_gamestateresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->gamestateresponse(), output);
  }

  // optional .GameReadyRequest gameReadyRequest = 17;
  if (has_gamereadyrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->gamereadyrequest(), output);
  }

  // optional .PlayerSkillRequest playerSkillRequest = 18;
  if (has_playerskillrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->playerskillrequest(), output);
  }

  // optional .PlayerSkillResponse playerSkillResponse = 19;
  if (has_playerskillresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->playerskillresponse(), output);
  }

  // optional .UltimateSkillChooseRequest UltimateSkillChooseRequest = 20;
  if (has_ultimateskillchooserequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ultimateskillchooserequest(), output);
  }

  // optional .UltimateSkillChooseResponse UltimateSkillChooseResponse = 21;
  if (has_ultimateskillchooseresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->ultimateskillchooseresponse(), output);
  }

  // optional .PlayerRenewalRequest playerRenewalRequest = 22;
  if (has_playerrenewalrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->playerrenewalrequest(), output);
  }

  // optional .PlayerRenewalResponse playerRenewalResponse = 23;
  if (has_playerrenewalresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->playerrenewalresponse(), output);
  }

  // optional .BackpackResponse backpackResponse = 24;
  if (has_backpackresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->backpackresponse(), output);
  }

  // optional .ShopMerchandiseResponse shopMerchandiseResponse = 25;
  if (has_shopmerchandiseresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->shopmerchandiseresponse(), output);
  }

  // optional .BuyRequest buyRequest = 26;
  if (has_buyrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->buyrequest(), output);
  }

  // optional .UserChangedResponse userChangedResponse = 27;
  if (has_userchangedresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->userchangedresponse(), output);
  }

  // optional .Basic basic = 28;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->basic(), output);
  }

  // optional .PrivilegeResponse privilegeResponse = 29;
  if (has_privilegeresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->privilegeresponse(), output);
  }

  // optional .PayOrderRequest payOrderRequest = 30;
  if (has_payorderrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->payorderrequest(), output);
  }

  // optional .PayOrderResponse payOrderResponse = 31;
  if (has_payorderresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->payorderresponse(), output);
  }

  // optional .AuthorizationRequest authorizationRequest = 32;
  if (has_authorizationrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->authorizationrequest(), output);
  }

  // optional .PayResultRequest payResultRequest = 33;
  if (has_payresultrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->payresultrequest(), output);
  }

  // optional .PayResultResponse PayResultResponse = 34;
  if (has_payresultresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->payresultresponse(), output);
  }

  // optional .UserInfoResponse userInfoResponse = 35;
  if (has_userinforesponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->userinforesponse(), output);
  }

  // optional .AuthorizationResponse authorizationResponse = 36;
  if (has_authorizationresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->authorizationresponse(), output);
  }

  // optional .GoldCoinListRequest goldCoinListRequest = 37;
  if (has_goldcoinlistrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->goldcoinlistrequest(), output);
  }

  // optional .GoldCoinListResponse goldCoinListResponse = 38;
  if (has_goldcoinlistresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->goldcoinlistresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageInfo)
}

::google::protobuf::uint8* MessageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageInfo)
  // required int32 service = 1;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->service(), target);
  }

  // required int32 SN = 2;
  if (has_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sn(), target);
  }

  // optional int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  // optional string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  // optional .RegisterRequest registerRequest = 5;
  if (has_registerrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->registerrequest(), target);
  }

  // optional .RegisterResponse registerResponse = 6;
  if (has_registerresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->registerresponse(), target);
  }

  // optional .SkinChooseRequest skinChooseRequest = 7;
  if (has_skinchooserequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skinchooserequest(), target);
  }

  // optional .NickNameRandomRespone NickNameRandomRespone = 8;
  if (has_nicknamerandomrespone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->nicknamerandomrespone(), target);
  }

  // optional .MatchStartResponse matchStartResponse = 9;
  if (has_matchstartresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->matchstartresponse(), target);
  }

  // optional .PLayerListResponse pLayerListResponse = 10;
  if (has_playerlistresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->playerlistresponse(), target);
  }

  // optional .FoodChangeResponse foodChangeResponse = 11;
  if (has_foodchangeresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->foodchangeresponse(), target);
  }

  // optional .PlayerOperationRequest playerOperationRequest = 12;
  if (has_playeroperationrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->playeroperationrequest(), target);
  }

  // optional .RemainTimeResponse remainTimeResponse = 13;
  if (has_remaintimeresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->remaintimeresponse(), target);
  }

  // optional .RankListResponse rankListResponse = 14;
  if (has_ranklistresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ranklistresponse(), target);
  }

  // optional .GameEndResponse GameEndResponse = 15;
  if (has_gameendresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->gameendresponse(), target);
  }

  // optional .GameStateResponse gameStateResponse = 16;
  if (has_gamestateresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->gamestateresponse(), target);
  }

  // optional .GameReadyRequest gameReadyRequest = 17;
  if (has_gamereadyrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->gamereadyrequest(), target);
  }

  // optional .PlayerSkillRequest playerSkillRequest = 18;
  if (has_playerskillrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->playerskillrequest(), target);
  }

  // optional .PlayerSkillResponse playerSkillResponse = 19;
  if (has_playerskillresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->playerskillresponse(), target);
  }

  // optional .UltimateSkillChooseRequest UltimateSkillChooseRequest = 20;
  if (has_ultimateskillchooserequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ultimateskillchooserequest(), target);
  }

  // optional .UltimateSkillChooseResponse UltimateSkillChooseResponse = 21;
  if (has_ultimateskillchooseresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->ultimateskillchooseresponse(), target);
  }

  // optional .PlayerRenewalRequest playerRenewalRequest = 22;
  if (has_playerrenewalrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->playerrenewalrequest(), target);
  }

  // optional .PlayerRenewalResponse playerRenewalResponse = 23;
  if (has_playerrenewalresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->playerrenewalresponse(), target);
  }

  // optional .BackpackResponse backpackResponse = 24;
  if (has_backpackresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->backpackresponse(), target);
  }

  // optional .ShopMerchandiseResponse shopMerchandiseResponse = 25;
  if (has_shopmerchandiseresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->shopmerchandiseresponse(), target);
  }

  // optional .BuyRequest buyRequest = 26;
  if (has_buyrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->buyrequest(), target);
  }

  // optional .UserChangedResponse userChangedResponse = 27;
  if (has_userchangedresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->userchangedresponse(), target);
  }

  // optional .Basic basic = 28;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->basic(), target);
  }

  // optional .PrivilegeResponse privilegeResponse = 29;
  if (has_privilegeresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->privilegeresponse(), target);
  }

  // optional .PayOrderRequest payOrderRequest = 30;
  if (has_payorderrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->payorderrequest(), target);
  }

  // optional .PayOrderResponse payOrderResponse = 31;
  if (has_payorderresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->payorderresponse(), target);
  }

  // optional .AuthorizationRequest authorizationRequest = 32;
  if (has_authorizationrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->authorizationrequest(), target);
  }

  // optional .PayResultRequest payResultRequest = 33;
  if (has_payresultrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->payresultrequest(), target);
  }

  // optional .PayResultResponse PayResultResponse = 34;
  if (has_payresultresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->payresultresponse(), target);
  }

  // optional .UserInfoResponse userInfoResponse = 35;
  if (has_userinforesponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->userinforesponse(), target);
  }

  // optional .AuthorizationResponse authorizationResponse = 36;
  if (has_authorizationresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->authorizationresponse(), target);
  }

  // optional .GoldCoinListRequest goldCoinListRequest = 37;
  if (has_goldcoinlistrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->goldcoinlistrequest(), target);
  }

  // optional .GoldCoinListResponse goldCoinListResponse = 38;
  if (has_goldcoinlistresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->goldcoinlistresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageInfo)
  return target;
}

int MessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->service());
    }

    // required int32 SN = 2;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sn());
    }

    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .Basic basic = 28;
    if (has_basic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

    // optional .RegisterRequest registerRequest = 5;
    if (has_registerrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerrequest());
    }

    // optional .RegisterResponse registerResponse = 6;
    if (has_registerresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerresponse());
    }

    // optional .SkinChooseRequest skinChooseRequest = 7;
    if (has_skinchooserequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skinchooserequest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .NickNameRandomRespone NickNameRandomRespone = 8;
    if (has_nicknamerandomrespone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nicknamerandomrespone());
    }

    // optional .MatchStartResponse matchStartResponse = 9;
    if (has_matchstartresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchstartresponse());
    }

    // optional .PLayerListResponse pLayerListResponse = 10;
    if (has_playerlistresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerlistresponse());
    }

    // optional .FoodChangeResponse foodChangeResponse = 11;
    if (has_foodchangeresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->foodchangeresponse());
    }

    // optional .PlayerOperationRequest playerOperationRequest = 12;
    if (has_playeroperationrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeroperationrequest());
    }

    // optional .RemainTimeResponse remainTimeResponse = 13;
    if (has_remaintimeresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remaintimeresponse());
    }

    // optional .RankListResponse rankListResponse = 14;
    if (has_ranklistresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranklistresponse());
    }

    // optional .GameEndResponse GameEndResponse = 15;
    if (has_gameendresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameendresponse());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .GameStateResponse gameStateResponse = 16;
    if (has_gamestateresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestateresponse());
    }

    // optional .GameReadyRequest gameReadyRequest = 17;
    if (has_gamereadyrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamereadyrequest());
    }

    // optional .PlayerSkillRequest playerSkillRequest = 18;
    if (has_playerskillrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerskillrequest());
    }

    // optional .PlayerSkillResponse playerSkillResponse = 19;
    if (has_playerskillresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerskillresponse());
    }

    // optional .UltimateSkillChooseRequest UltimateSkillChooseRequest = 20;
    if (has_ultimateskillchooserequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ultimateskillchooserequest());
    }

    // optional .UltimateSkillChooseResponse UltimateSkillChooseResponse = 21;
    if (has_ultimateskillchooseresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ultimateskillchooseresponse());
    }

    // optional .PlayerRenewalRequest playerRenewalRequest = 22;
    if (has_playerrenewalrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerrenewalrequest());
    }

    // optional .PlayerRenewalResponse playerRenewalResponse = 23;
    if (has_playerrenewalresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerrenewalresponse());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .BackpackResponse backpackResponse = 24;
    if (has_backpackresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backpackresponse());
    }

    // optional .ShopMerchandiseResponse shopMerchandiseResponse = 25;
    if (has_shopmerchandiseresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopmerchandiseresponse());
    }

    // optional .BuyRequest buyRequest = 26;
    if (has_buyrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyrequest());
    }

    // optional .UserChangedResponse userChangedResponse = 27;
    if (has_userchangedresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userchangedresponse());
    }

    // optional .PrivilegeResponse privilegeResponse = 29;
    if (has_privilegeresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilegeresponse());
    }

    // optional .PayOrderRequest payOrderRequest = 30;
    if (has_payorderrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payorderrequest());
    }

    // optional .PayOrderResponse payOrderResponse = 31;
    if (has_payorderresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payorderresponse());
    }

    // optional .AuthorizationRequest authorizationRequest = 32;
    if (has_authorizationrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authorizationrequest());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .AuthorizationResponse authorizationResponse = 36;
    if (has_authorizationresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authorizationresponse());
    }

    // optional .PayResultRequest payResultRequest = 33;
    if (has_payresultrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payresultrequest());
    }

    // optional .PayResultResponse PayResultResponse = 34;
    if (has_payresultresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payresultresponse());
    }

    // optional .UserInfoResponse userInfoResponse = 35;
    if (has_userinforesponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinforesponse());
    }

    // optional .GoldCoinListRequest goldCoinListRequest = 37;
    if (has_goldcoinlistrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goldcoinlistrequest());
    }

    // optional .GoldCoinListResponse goldCoinListResponse = 38;
    if (has_goldcoinlistresponse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goldcoinlistresponse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_basic()) {
      mutable_basic()->::Basic::MergeFrom(from.basic());
    }
    if (from.has_registerrequest()) {
      mutable_registerrequest()->::RegisterRequest::MergeFrom(from.registerrequest());
    }
    if (from.has_registerresponse()) {
      mutable_registerresponse()->::RegisterResponse::MergeFrom(from.registerresponse());
    }
    if (from.has_skinchooserequest()) {
      mutable_skinchooserequest()->::SkinChooseRequest::MergeFrom(from.skinchooserequest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nicknamerandomrespone()) {
      mutable_nicknamerandomrespone()->::NickNameRandomRespone::MergeFrom(from.nicknamerandomrespone());
    }
    if (from.has_matchstartresponse()) {
      mutable_matchstartresponse()->::MatchStartResponse::MergeFrom(from.matchstartresponse());
    }
    if (from.has_playerlistresponse()) {
      mutable_playerlistresponse()->::PLayerListResponse::MergeFrom(from.playerlistresponse());
    }
    if (from.has_foodchangeresponse()) {
      mutable_foodchangeresponse()->::FoodChangeResponse::MergeFrom(from.foodchangeresponse());
    }
    if (from.has_playeroperationrequest()) {
      mutable_playeroperationrequest()->::PlayerOperationRequest::MergeFrom(from.playeroperationrequest());
    }
    if (from.has_remaintimeresponse()) {
      mutable_remaintimeresponse()->::RemainTimeResponse::MergeFrom(from.remaintimeresponse());
    }
    if (from.has_ranklistresponse()) {
      mutable_ranklistresponse()->::RankListResponse::MergeFrom(from.ranklistresponse());
    }
    if (from.has_gameendresponse()) {
      mutable_gameendresponse()->::GameEndResponse::MergeFrom(from.gameendresponse());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gamestateresponse()) {
      mutable_gamestateresponse()->::GameStateResponse::MergeFrom(from.gamestateresponse());
    }
    if (from.has_gamereadyrequest()) {
      mutable_gamereadyrequest()->::GameReadyRequest::MergeFrom(from.gamereadyrequest());
    }
    if (from.has_playerskillrequest()) {
      mutable_playerskillrequest()->::PlayerSkillRequest::MergeFrom(from.playerskillrequest());
    }
    if (from.has_playerskillresponse()) {
      mutable_playerskillresponse()->::PlayerSkillResponse::MergeFrom(from.playerskillresponse());
    }
    if (from.has_ultimateskillchooserequest()) {
      mutable_ultimateskillchooserequest()->::UltimateSkillChooseRequest::MergeFrom(from.ultimateskillchooserequest());
    }
    if (from.has_ultimateskillchooseresponse()) {
      mutable_ultimateskillchooseresponse()->::UltimateSkillChooseResponse::MergeFrom(from.ultimateskillchooseresponse());
    }
    if (from.has_playerrenewalrequest()) {
      mutable_playerrenewalrequest()->::PlayerRenewalRequest::MergeFrom(from.playerrenewalrequest());
    }
    if (from.has_playerrenewalresponse()) {
      mutable_playerrenewalresponse()->::PlayerRenewalResponse::MergeFrom(from.playerrenewalresponse());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_backpackresponse()) {
      mutable_backpackresponse()->::BackpackResponse::MergeFrom(from.backpackresponse());
    }
    if (from.has_shopmerchandiseresponse()) {
      mutable_shopmerchandiseresponse()->::ShopMerchandiseResponse::MergeFrom(from.shopmerchandiseresponse());
    }
    if (from.has_buyrequest()) {
      mutable_buyrequest()->::BuyRequest::MergeFrom(from.buyrequest());
    }
    if (from.has_userchangedresponse()) {
      mutable_userchangedresponse()->::UserChangedResponse::MergeFrom(from.userchangedresponse());
    }
    if (from.has_privilegeresponse()) {
      mutable_privilegeresponse()->::PrivilegeResponse::MergeFrom(from.privilegeresponse());
    }
    if (from.has_payorderrequest()) {
      mutable_payorderrequest()->::PayOrderRequest::MergeFrom(from.payorderrequest());
    }
    if (from.has_payorderresponse()) {
      mutable_payorderresponse()->::PayOrderResponse::MergeFrom(from.payorderresponse());
    }
    if (from.has_authorizationrequest()) {
      mutable_authorizationrequest()->::AuthorizationRequest::MergeFrom(from.authorizationrequest());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_authorizationresponse()) {
      mutable_authorizationresponse()->::AuthorizationResponse::MergeFrom(from.authorizationresponse());
    }
    if (from.has_payresultrequest()) {
      mutable_payresultrequest()->::PayResultRequest::MergeFrom(from.payresultrequest());
    }
    if (from.has_payresultresponse()) {
      mutable_payresultresponse()->::PayResultResponse::MergeFrom(from.payresultresponse());
    }
    if (from.has_userinforesponse()) {
      mutable_userinforesponse()->::UserInfoResponse::MergeFrom(from.userinforesponse());
    }
    if (from.has_goldcoinlistrequest()) {
      mutable_goldcoinlistrequest()->::GoldCoinListRequest::MergeFrom(from.goldcoinlistrequest());
    }
    if (from.has_goldcoinlistresponse()) {
      mutable_goldcoinlistresponse()->::GoldCoinListResponse::MergeFrom(from.goldcoinlistresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_registerresponse()) {
    if (!this->registerresponse().IsInitialized()) return false;
  }
  if (has_skinchooserequest()) {
    if (!this->skinchooserequest().IsInitialized()) return false;
  }
  if (has_nicknamerandomrespone()) {
    if (!this->nicknamerandomrespone().IsInitialized()) return false;
  }
  if (has_matchstartresponse()) {
    if (!this->matchstartresponse().IsInitialized()) return false;
  }
  if (has_playerlistresponse()) {
    if (!this->playerlistresponse().IsInitialized()) return false;
  }
  if (has_foodchangeresponse()) {
    if (!this->foodchangeresponse().IsInitialized()) return false;
  }
  if (has_playeroperationrequest()) {
    if (!this->playeroperationrequest().IsInitialized()) return false;
  }
  if (has_remaintimeresponse()) {
    if (!this->remaintimeresponse().IsInitialized()) return false;
  }
  if (has_ranklistresponse()) {
    if (!this->ranklistresponse().IsInitialized()) return false;
  }
  if (has_gameendresponse()) {
    if (!this->gameendresponse().IsInitialized()) return false;
  }
  if (has_gamestateresponse()) {
    if (!this->gamestateresponse().IsInitialized()) return false;
  }
  if (has_playerskillrequest()) {
    if (!this->playerskillrequest().IsInitialized()) return false;
  }
  if (has_playerskillresponse()) {
    if (!this->playerskillresponse().IsInitialized()) return false;
  }
  if (has_backpackresponse()) {
    if (!this->backpackresponse().IsInitialized()) return false;
  }
  if (has_shopmerchandiseresponse()) {
    if (!this->shopmerchandiseresponse().IsInitialized()) return false;
  }
  if (has_buyrequest()) {
    if (!this->buyrequest().IsInitialized()) return false;
  }
  if (has_userchangedresponse()) {
    if (!this->userchangedresponse().IsInitialized()) return false;
  }
  if (has_privilegeresponse()) {
    if (!this->privilegeresponse().IsInitialized()) return false;
  }
  if (has_payorderrequest()) {
    if (!this->payorderrequest().IsInitialized()) return false;
  }
  if (has_payorderresponse()) {
    if (!this->payorderresponse().IsInitialized()) return false;
  }
  if (has_authorizationrequest()) {
    if (!this->authorizationrequest().IsInitialized()) return false;
  }
  if (has_authorizationresponse()) {
    if (!this->authorizationresponse().IsInitialized()) return false;
  }
  if (has_payresultrequest()) {
    if (!this->payresultrequest().IsInitialized()) return false;
  }
  if (has_payresultresponse()) {
    if (!this->payresultresponse().IsInitialized()) return false;
  }
  if (has_userinforesponse()) {
    if (!this->userinforesponse().IsInitialized()) return false;
  }
  if (has_goldcoinlistrequest()) {
    if (!this->goldcoinlistrequest().IsInitialized()) return false;
  }
  if (has_goldcoinlistresponse()) {
    if (!this->goldcoinlistresponse().IsInitialized()) return false;
  }
  return true;
}

void MessageInfo::Swap(MessageInfo* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(sn_, other->sn_);
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(basic_, other->basic_);
    std::swap(registerrequest_, other->registerrequest_);
    std::swap(registerresponse_, other->registerresponse_);
    std::swap(skinchooserequest_, other->skinchooserequest_);
    std::swap(nicknamerandomrespone_, other->nicknamerandomrespone_);
    std::swap(matchstartresponse_, other->matchstartresponse_);
    std::swap(playerlistresponse_, other->playerlistresponse_);
    std::swap(foodchangeresponse_, other->foodchangeresponse_);
    std::swap(playeroperationrequest_, other->playeroperationrequest_);
    std::swap(remaintimeresponse_, other->remaintimeresponse_);
    std::swap(ranklistresponse_, other->ranklistresponse_);
    std::swap(gameendresponse_, other->gameendresponse_);
    std::swap(gamestateresponse_, other->gamestateresponse_);
    std::swap(gamereadyrequest_, other->gamereadyrequest_);
    std::swap(playerskillrequest_, other->playerskillrequest_);
    std::swap(playerskillresponse_, other->playerskillresponse_);
    std::swap(ultimateskillchooserequest_, other->ultimateskillchooserequest_);
    std::swap(ultimateskillchooseresponse_, other->ultimateskillchooseresponse_);
    std::swap(playerrenewalrequest_, other->playerrenewalrequest_);
    std::swap(playerrenewalresponse_, other->playerrenewalresponse_);
    std::swap(backpackresponse_, other->backpackresponse_);
    std::swap(shopmerchandiseresponse_, other->shopmerchandiseresponse_);
    std::swap(buyrequest_, other->buyrequest_);
    std::swap(userchangedresponse_, other->userchangedresponse_);
    std::swap(privilegeresponse_, other->privilegeresponse_);
    std::swap(payorderrequest_, other->payorderrequest_);
    std::swap(payorderresponse_, other->payorderresponse_);
    std::swap(authorizationrequest_, other->authorizationrequest_);
    std::swap(authorizationresponse_, other->authorizationresponse_);
    std::swap(payresultrequest_, other->payresultrequest_);
    std::swap(payresultresponse_, other->payresultresponse_);
    std::swap(userinforesponse_, other->userinforesponse_);
    std::swap(goldcoinlistrequest_, other->goldcoinlistrequest_);
    std::swap(goldcoinlistresponse_, other->goldcoinlistresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageInfo_descriptor_;
  metadata.reflection = MessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Basic::kChannelFieldNumber;
#endif  // !_MSC_VER

Basic::Basic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Basic)
}

void Basic::InitAsDefaultInstance() {
}

Basic::Basic(const Basic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Basic)
}

void Basic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Basic::~Basic() {
  // @@protoc_insertion_point(destructor:Basic)
  SharedDtor();
}

void Basic::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (this != default_instance_) {
  }
}

void Basic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Basic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Basic_descriptor_;
}

const Basic& Basic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Basic* Basic::default_instance_ = NULL;

Basic* Basic::New() const {
  return new Basic;
}

void Basic::Clear() {
  if (has_channel()) {
    if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      channel_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Basic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Basic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Basic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Basic)
  return false;
#undef DO_
}

void Basic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Basic)
  // optional string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Basic)
}

::google::protobuf::uint8* Basic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Basic)
  // optional string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Basic)
  return target;
}

int Basic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Basic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Basic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Basic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Basic::MergeFrom(const Basic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Basic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Basic::CopyFrom(const Basic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Basic::IsInitialized() const {

  return true;
}

void Basic::Swap(Basic* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Basic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Basic_descriptor_;
  metadata.reflection = Basic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRequest::kMacFieldNumber;
const int RegisterRequest::kUserPayIdFieldNumber;
const int RegisterRequest::kDeviceFieldNumber;
#endif  // !_MSC_VER

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterRequest)
}

void RegisterRequest::InitAsDefaultInstance() {
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (userpayid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userpayid_;
  }
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New() const {
  return new RegisterRequest;
}

void RegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_userpayid()) {
      if (userpayid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userpayid_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mac = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userPayId;
        break;
      }

      // optional string userPayId = 2;
      case 2: {
        if (tag == 18) {
         parse_userPayId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpayid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpayid().data(), this->userpayid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userpayid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // optional string device = 3;
      case 3: {
        if (tag == 26) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterRequest)
  return false;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterRequest)
  // optional string mac = 1;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mac(), output);
  }

  // optional string userPayId = 2;
  if (has_userpayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpayid().data(), this->userpayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpayid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userpayid(), output);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterRequest)
}

::google::protobuf::uint8* RegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRequest)
  // optional string mac = 1;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mac(), target);
  }

  // optional string userPayId = 2;
  if (has_userpayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpayid().data(), this->userpayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpayid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userpayid(), target);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRequest)
  return target;
}

int RegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mac = 1;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string userPayId = 2;
    if (has_userpayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpayid());
    }

    // optional string device = 3;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_userpayid()) {
      set_userpayid(from.userpayid());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other != this) {
    std::swap(mac_, other->mac_);
    std::swap(userpayid_, other->userpayid_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterResponse::kUserInfoFieldNumber;
const int RegisterResponse::kPropOverdueFieldNumber;
const int RegisterResponse::kSignRewardsFieldNumber;
const int RegisterResponse::kRenewMerchandiseFieldNumber;
#endif  // !_MSC_VER

RegisterResponse::RegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterResponse)
}

void RegisterResponse::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
  renewmerchandise_ = const_cast< ::RenewMerchandise*>(&::RenewMerchandise::default_instance());
}

RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterResponse)
}

void RegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  propoverdue_ = 0;
  renewmerchandise_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete renewmerchandise_;
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterResponse_descriptor_;
}

const RegisterResponse& RegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

RegisterResponse* RegisterResponse::default_instance_ = NULL;

RegisterResponse* RegisterResponse::New() const {
  return new RegisterResponse;
}

void RegisterResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    propoverdue_ = 0;
    if (has_renewmerchandise()) {
      if (renewmerchandise_ != NULL) renewmerchandise_->::RenewMerchandise::Clear();
    }
  }
  signrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserInfo userInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propOverdue;
        break;
      }

      // optional int32 propOverdue = 2;
      case 2: {
        if (tag == 16) {
         parse_propOverdue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propoverdue_)));
          set_has_propoverdue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_signRewards;
        break;
      }

      // repeated .SignReward signRewards = 3;
      case 3: {
        if (tag == 26) {
         parse_signRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_signRewards;
        if (input->ExpectTag(34)) goto parse_renewMerchandise;
        break;
      }

      // optional .RenewMerchandise renewMerchandise = 4;
      case 4: {
        if (tag == 34) {
         parse_renewMerchandise:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renewmerchandise()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterResponse)
  return false;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional int32 propOverdue = 2;
  if (has_propoverdue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propoverdue(), output);
  }

  // repeated .SignReward signRewards = 3;
  for (int i = 0; i < this->signrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signrewards(i), output);
  }

  // optional .RenewMerchandise renewMerchandise = 4;
  if (has_renewmerchandise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->renewmerchandise(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterResponse)
}

::google::protobuf::uint8* RegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional int32 propOverdue = 2;
  if (has_propoverdue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propoverdue(), target);
  }

  // repeated .SignReward signRewards = 3;
  for (int i = 0; i < this->signrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signrewards(i), target);
  }

  // optional .RenewMerchandise renewMerchandise = 4;
  if (has_renewmerchandise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->renewmerchandise(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterResponse)
  return target;
}

int RegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserInfo userInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional int32 propOverdue = 2;
    if (has_propoverdue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propoverdue());
    }

    // optional .RenewMerchandise renewMerchandise = 4;
    if (has_renewmerchandise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->renewmerchandise());
    }

  }
  // repeated .SignReward signRewards = 3;
  total_size += 1 * this->signrewards_size();
  for (int i = 0; i < this->signrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  signrewards_.MergeFrom(from.signrewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_propoverdue()) {
      set_propoverdue(from.propoverdue());
    }
    if (from.has_renewmerchandise()) {
      mutable_renewmerchandise()->::RenewMerchandise::MergeFrom(from.renewmerchandise());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->signrewards())) return false;
  if (has_renewmerchandise()) {
    if (!this->renewmerchandise().IsInitialized()) return false;
  }
  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(propoverdue_, other->propoverdue_);
    signrewards_.Swap(&other->signrewards_);
    std::swap(renewmerchandise_, other->renewmerchandise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterResponse_descriptor_;
  metadata.reflection = RegisterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenewMerchandise::kIdFieldNumber;
const int RenewMerchandise::kGoldFieldNumber;
const int RenewMerchandise::kPriceFieldNumber;
#endif  // !_MSC_VER

RenewMerchandise::RenewMerchandise()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RenewMerchandise)
}

void RenewMerchandise::InitAsDefaultInstance() {
}

RenewMerchandise::RenewMerchandise(const RenewMerchandise& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RenewMerchandise)
}

void RenewMerchandise::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gold_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenewMerchandise::~RenewMerchandise() {
  // @@protoc_insertion_point(destructor:RenewMerchandise)
  SharedDtor();
}

void RenewMerchandise::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RenewMerchandise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenewMerchandise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenewMerchandise_descriptor_;
}

const RenewMerchandise& RenewMerchandise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

RenewMerchandise* RenewMerchandise::default_instance_ = NULL;

RenewMerchandise* RenewMerchandise::New() const {
  return new RenewMerchandise;
}

void RenewMerchandise::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RenewMerchandise*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gold_, price_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenewMerchandise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RenewMerchandise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int32 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RenewMerchandise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RenewMerchandise)
  return false;
#undef DO_
}

void RenewMerchandise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RenewMerchandise)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RenewMerchandise)
}

::google::protobuf::uint8* RenewMerchandise::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenewMerchandise)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenewMerchandise)
  return target;
}

int RenewMerchandise::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenewMerchandise::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenewMerchandise* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenewMerchandise*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenewMerchandise::MergeFrom(const RenewMerchandise& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenewMerchandise::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewMerchandise::CopyFrom(const RenewMerchandise& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewMerchandise::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RenewMerchandise::Swap(RenewMerchandise* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gold_, other->gold_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenewMerchandise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenewMerchandise_descriptor_;
  metadata.reflection = RenewMerchandise_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignReward::kDayFieldNumber;
const int SignReward::kGoldFieldNumber;
const int SignReward::kStatusFieldNumber;
#endif  // !_MSC_VER

SignReward::SignReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignReward)
}

void SignReward::InitAsDefaultInstance() {
}

SignReward::SignReward(const SignReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SignReward)
}

void SignReward::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  gold_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignReward::~SignReward() {
  // @@protoc_insertion_point(destructor:SignReward)
  SharedDtor();
}

void SignReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignReward_descriptor_;
}

const SignReward& SignReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

SignReward* SignReward::default_instance_ = NULL;

SignReward* SignReward::New() const {
  return new SignReward;
}

void SignReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SignReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(day_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignReward)
  return false;
#undef DO_
}

void SignReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignReward)
  // required int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignReward)
}

::google::protobuf::uint8* SignReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignReward)
  // required int32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignReward)
  return target;
}

int SignReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignReward::MergeFrom(const SignReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignReward::CopyFrom(const SignReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SignReward::Swap(SignReward* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(gold_, other->gold_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignReward_descriptor_;
  metadata.reflection = SignReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkinChooseRequest::kSkinFieldNumber;
#endif  // !_MSC_VER

SkinChooseRequest::SkinChooseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkinChooseRequest)
}

void SkinChooseRequest::InitAsDefaultInstance() {
}

SkinChooseRequest::SkinChooseRequest(const SkinChooseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkinChooseRequest)
}

void SkinChooseRequest::SharedCtor() {
  _cached_size_ = 0;
  skin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkinChooseRequest::~SkinChooseRequest() {
  // @@protoc_insertion_point(destructor:SkinChooseRequest)
  SharedDtor();
}

void SkinChooseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkinChooseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkinChooseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkinChooseRequest_descriptor_;
}

const SkinChooseRequest& SkinChooseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

SkinChooseRequest* SkinChooseRequest::default_instance_ = NULL;

SkinChooseRequest* SkinChooseRequest::New() const {
  return new SkinChooseRequest;
}

void SkinChooseRequest::Clear() {
  skin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkinChooseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkinChooseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_)));
          set_has_skin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkinChooseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkinChooseRequest)
  return false;
#undef DO_
}

void SkinChooseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkinChooseRequest)
  // required int32 skin = 1;
  if (has_skin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkinChooseRequest)
}

::google::protobuf::uint8* SkinChooseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkinChooseRequest)
  // required int32 skin = 1;
  if (has_skin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkinChooseRequest)
  return target;
}

int SkinChooseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skin = 1;
    if (has_skin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkinChooseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkinChooseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkinChooseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkinChooseRequest::MergeFrom(const SkinChooseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skin()) {
      set_skin(from.skin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkinChooseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkinChooseRequest::CopyFrom(const SkinChooseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinChooseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkinChooseRequest::Swap(SkinChooseRequest* other) {
  if (other != this) {
    std::swap(skin_, other->skin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkinChooseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkinChooseRequest_descriptor_;
  metadata.reflection = SkinChooseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NickNameRandomRespone::kNicknameFieldNumber;
#endif  // !_MSC_VER

NickNameRandomRespone::NickNameRandomRespone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NickNameRandomRespone)
}

void NickNameRandomRespone::InitAsDefaultInstance() {
}

NickNameRandomRespone::NickNameRandomRespone(const NickNameRandomRespone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NickNameRandomRespone)
}

void NickNameRandomRespone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NickNameRandomRespone::~NickNameRandomRespone() {
  // @@protoc_insertion_point(destructor:NickNameRandomRespone)
  SharedDtor();
}

void NickNameRandomRespone::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void NickNameRandomRespone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NickNameRandomRespone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NickNameRandomRespone_descriptor_;
}

const NickNameRandomRespone& NickNameRandomRespone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

NickNameRandomRespone* NickNameRandomRespone::default_instance_ = NULL;

NickNameRandomRespone* NickNameRandomRespone::New() const {
  return new NickNameRandomRespone;
}

void NickNameRandomRespone::Clear() {
  if (has_nickname()) {
    if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nickname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NickNameRandomRespone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NickNameRandomRespone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NickNameRandomRespone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NickNameRandomRespone)
  return false;
#undef DO_
}

void NickNameRandomRespone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NickNameRandomRespone)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NickNameRandomRespone)
}

::google::protobuf::uint8* NickNameRandomRespone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NickNameRandomRespone)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NickNameRandomRespone)
  return target;
}

int NickNameRandomRespone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NickNameRandomRespone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NickNameRandomRespone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NickNameRandomRespone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NickNameRandomRespone::MergeFrom(const NickNameRandomRespone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NickNameRandomRespone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NickNameRandomRespone::CopyFrom(const NickNameRandomRespone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NickNameRandomRespone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NickNameRandomRespone::Swap(NickNameRandomRespone* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NickNameRandomRespone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NickNameRandomRespone_descriptor_;
  metadata.reflection = NickNameRandomRespone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchStartResponse::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

MatchStartResponse::MatchStartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchStartResponse)
}

void MatchStartResponse::InitAsDefaultInstance() {
  roominfo_ = const_cast< ::RoomInfo*>(&::RoomInfo::default_instance());
}

MatchStartResponse::MatchStartResponse(const MatchStartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MatchStartResponse)
}

void MatchStartResponse::SharedCtor() {
  _cached_size_ = 0;
  roominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchStartResponse::~MatchStartResponse() {
  // @@protoc_insertion_point(destructor:MatchStartResponse)
  SharedDtor();
}

void MatchStartResponse::SharedDtor() {
  if (this != default_instance_) {
    delete roominfo_;
  }
}

void MatchStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchStartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchStartResponse_descriptor_;
}

const MatchStartResponse& MatchStartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

MatchStartResponse* MatchStartResponse::default_instance_ = NULL;

MatchStartResponse* MatchStartResponse::New() const {
  return new MatchStartResponse;
}

void MatchStartResponse::Clear() {
  if (has_roominfo()) {
    if (roominfo_ != NULL) roominfo_->::RoomInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MatchStartResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoomInfo roomInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MatchStartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MatchStartResponse)
  return false;
#undef DO_
}

void MatchStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MatchStartResponse)
  // required .RoomInfo roomInfo = 1;
  if (has_roominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roominfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MatchStartResponse)
}

::google::protobuf::uint8* MatchStartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchStartResponse)
  // required .RoomInfo roomInfo = 1;
  if (has_roominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roominfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchStartResponse)
  return target;
}

int MatchStartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RoomInfo roomInfo = 1;
    if (has_roominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roominfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchStartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchStartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchStartResponse::MergeFrom(const MatchStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roominfo()) {
      mutable_roominfo()->::RoomInfo::MergeFrom(from.roominfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchStartResponse::CopyFrom(const MatchStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchStartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roominfo()) {
    if (!this->roominfo().IsInitialized()) return false;
  }
  return true;
}

void MatchStartResponse::Swap(MatchStartResponse* other) {
  if (other != this) {
    std::swap(roominfo_, other->roominfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchStartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchStartResponse_descriptor_;
  metadata.reflection = MatchStartResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PLayerListResponse::kAllPlayersFieldNumber;
const int PLayerListResponse::kRemovePlayersFieldNumber;
const int PLayerListResponse::kNewPlayersFieldNumber;
const int PLayerListResponse::kChangePlayersFieldNumber;
#endif  // !_MSC_VER

PLayerListResponse::PLayerListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PLayerListResponse)
}

void PLayerListResponse::InitAsDefaultInstance() {
}

PLayerListResponse::PLayerListResponse(const PLayerListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PLayerListResponse)
}

void PLayerListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PLayerListResponse::~PLayerListResponse() {
  // @@protoc_insertion_point(destructor:PLayerListResponse)
  SharedDtor();
}

void PLayerListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PLayerListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PLayerListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLayerListResponse_descriptor_;
}

const PLayerListResponse& PLayerListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PLayerListResponse* PLayerListResponse::default_instance_ = NULL;

PLayerListResponse* PLayerListResponse::New() const {
  return new PLayerListResponse;
}

void PLayerListResponse::Clear() {
  allplayers_.Clear();
  removeplayers_.Clear();
  newplayers_.Clear();
  changeplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PLayerListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PLayerListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Player allPlayers = 1;
      case 1: {
        if (tag == 10) {
         parse_allPlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allplayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_allPlayers;
        if (input->ExpectTag(18)) goto parse_removePlayers;
        break;
      }

      // repeated .Player removePlayers = 2;
      case 2: {
        if (tag == 18) {
         parse_removePlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_removeplayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_removePlayers;
        if (input->ExpectTag(26)) goto parse_newPlayers;
        break;
      }

      // repeated .Player newPlayers = 3;
      case 3: {
        if (tag == 26) {
         parse_newPlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newplayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_newPlayers;
        if (input->ExpectTag(34)) goto parse_changePlayers;
        break;
      }

      // repeated .Player changePlayers = 4;
      case 4: {
        if (tag == 34) {
         parse_changePlayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changeplayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_changePlayers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PLayerListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PLayerListResponse)
  return false;
#undef DO_
}

void PLayerListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PLayerListResponse)
  // repeated .Player allPlayers = 1;
  for (int i = 0; i < this->allplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allplayers(i), output);
  }

  // repeated .Player removePlayers = 2;
  for (int i = 0; i < this->removeplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->removeplayers(i), output);
  }

  // repeated .Player newPlayers = 3;
  for (int i = 0; i < this->newplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newplayers(i), output);
  }

  // repeated .Player changePlayers = 4;
  for (int i = 0; i < this->changeplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->changeplayers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PLayerListResponse)
}

::google::protobuf::uint8* PLayerListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PLayerListResponse)
  // repeated .Player allPlayers = 1;
  for (int i = 0; i < this->allplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allplayers(i), target);
  }

  // repeated .Player removePlayers = 2;
  for (int i = 0; i < this->removeplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->removeplayers(i), target);
  }

  // repeated .Player newPlayers = 3;
  for (int i = 0; i < this->newplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newplayers(i), target);
  }

  // repeated .Player changePlayers = 4;
  for (int i = 0; i < this->changeplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->changeplayers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PLayerListResponse)
  return target;
}

int PLayerListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Player allPlayers = 1;
  total_size += 1 * this->allplayers_size();
  for (int i = 0; i < this->allplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allplayers(i));
  }

  // repeated .Player removePlayers = 2;
  total_size += 1 * this->removeplayers_size();
  for (int i = 0; i < this->removeplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->removeplayers(i));
  }

  // repeated .Player newPlayers = 3;
  total_size += 1 * this->newplayers_size();
  for (int i = 0; i < this->newplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newplayers(i));
  }

  // repeated .Player changePlayers = 4;
  total_size += 1 * this->changeplayers_size();
  for (int i = 0; i < this->changeplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changeplayers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PLayerListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PLayerListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PLayerListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PLayerListResponse::MergeFrom(const PLayerListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  allplayers_.MergeFrom(from.allplayers_);
  removeplayers_.MergeFrom(from.removeplayers_);
  newplayers_.MergeFrom(from.newplayers_);
  changeplayers_.MergeFrom(from.changeplayers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PLayerListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLayerListResponse::CopyFrom(const PLayerListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLayerListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->allplayers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->removeplayers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->newplayers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->changeplayers())) return false;
  return true;
}

void PLayerListResponse::Swap(PLayerListResponse* other) {
  if (other != this) {
    allplayers_.Swap(&other->allplayers_);
    removeplayers_.Swap(&other->removeplayers_);
    newplayers_.Swap(&other->newplayers_);
    changeplayers_.Swap(&other->changeplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PLayerListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PLayerListResponse_descriptor_;
  metadata.reflection = PLayerListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodChangeResponse::kTypeFieldNumber;
const int FoodChangeResponse::kFoodAreasFieldNumber;
#endif  // !_MSC_VER

FoodChangeResponse::FoodChangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FoodChangeResponse)
}

void FoodChangeResponse::InitAsDefaultInstance() {
}

FoodChangeResponse::FoodChangeResponse(const FoodChangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FoodChangeResponse)
}

void FoodChangeResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodChangeResponse::~FoodChangeResponse() {
  // @@protoc_insertion_point(destructor:FoodChangeResponse)
  SharedDtor();
}

void FoodChangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodChangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodChangeResponse_descriptor_;
}

const FoodChangeResponse& FoodChangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

FoodChangeResponse* FoodChangeResponse::default_instance_ = NULL;

FoodChangeResponse* FoodChangeResponse::New() const {
  return new FoodChangeResponse;
}

void FoodChangeResponse::Clear() {
  type_ = 0;
  foodareas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FoodChangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_foodAreas;
        break;
      }

      // repeated .FoodArea foodAreas = 2;
      case 2: {
        if (tag == 18) {
         parse_foodAreas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_foodareas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_foodAreas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FoodChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FoodChangeResponse)
  return false;
#undef DO_
}

void FoodChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FoodChangeResponse)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .FoodArea foodAreas = 2;
  for (int i = 0; i < this->foodareas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->foodareas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FoodChangeResponse)
}

::google::protobuf::uint8* FoodChangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FoodChangeResponse)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .FoodArea foodAreas = 2;
  for (int i = 0; i < this->foodareas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->foodareas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FoodChangeResponse)
  return target;
}

int FoodChangeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .FoodArea foodAreas = 2;
  total_size += 1 * this->foodareas_size();
  for (int i = 0; i < this->foodareas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->foodareas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodChangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodChangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodChangeResponse::MergeFrom(const FoodChangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  foodareas_.MergeFrom(from.foodareas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodChangeResponse::CopyFrom(const FoodChangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodChangeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->foodareas())) return false;
  return true;
}

void FoodChangeResponse::Swap(FoodChangeResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    foodareas_.Swap(&other->foodareas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodChangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodChangeResponse_descriptor_;
  metadata.reflection = FoodChangeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodArea::kAreaIdFieldNumber;
const int FoodArea::kXFieldNumber;
const int FoodArea::kYFieldNumber;
const int FoodArea::kWidthFieldNumber;
const int FoodArea::kHeightFieldNumber;
const int FoodArea::kFoodsFieldNumber;
#endif  // !_MSC_VER

FoodArea::FoodArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FoodArea)
}

void FoodArea::InitAsDefaultInstance() {
}

FoodArea::FoodArea(const FoodArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FoodArea)
}

void FoodArea::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodArea::~FoodArea() {
  // @@protoc_insertion_point(destructor:FoodArea)
  SharedDtor();
}

void FoodArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodArea_descriptor_;
}

const FoodArea& FoodArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

FoodArea* FoodArea::default_instance_ = NULL;

FoodArea* FoodArea::New() const {
  return new FoodArea;
}

void FoodArea::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FoodArea*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(areaid_, width_);
    height_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  foods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FoodArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 areaId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_foods;
        break;
      }

      // repeated .Food foods = 6;
      case 6: {
        if (tag == 50) {
         parse_foods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_foods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_foods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FoodArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FoodArea)
  return false;
#undef DO_
}

void FoodArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FoodArea)
  // optional int32 areaId = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->areaid(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // repeated .Food foods = 6;
  for (int i = 0; i < this->foods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->foods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FoodArea)
}

::google::protobuf::uint8* FoodArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FoodArea)
  // optional int32 areaId = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->areaid(), target);
  }

  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // repeated .Food foods = 6;
  for (int i = 0; i < this->foods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->foods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FoodArea)
  return target;
}

int FoodArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 areaId = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  // repeated .Food foods = 6;
  total_size += 1 * this->foods_size();
  for (int i = 0; i < this->foods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->foods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodArea::MergeFrom(const FoodArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  foods_.MergeFrom(from.foods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodArea::CopyFrom(const FoodArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodArea::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->foods())) return false;
  return true;
}

void FoodArea::Swap(FoodArea* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    foods_.Swap(&other->foods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodArea_descriptor_;
  metadata.reflection = FoodArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemainTimeResponse::kRemainFieldNumber;
#endif  // !_MSC_VER

RemainTimeResponse::RemainTimeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemainTimeResponse)
}

void RemainTimeResponse::InitAsDefaultInstance() {
}

RemainTimeResponse::RemainTimeResponse(const RemainTimeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RemainTimeResponse)
}

void RemainTimeResponse::SharedCtor() {
  _cached_size_ = 0;
  remain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemainTimeResponse::~RemainTimeResponse() {
  // @@protoc_insertion_point(destructor:RemainTimeResponse)
  SharedDtor();
}

void RemainTimeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemainTimeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemainTimeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemainTimeResponse_descriptor_;
}

const RemainTimeResponse& RemainTimeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

RemainTimeResponse* RemainTimeResponse::default_instance_ = NULL;

RemainTimeResponse* RemainTimeResponse::New() const {
  return new RemainTimeResponse;
}

void RemainTimeResponse::Clear() {
  remain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemainTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemainTimeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 remain = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_)));
          set_has_remain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemainTimeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemainTimeResponse)
  return false;
#undef DO_
}

void RemainTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemainTimeResponse)
  // required int32 remain = 1;
  if (has_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemainTimeResponse)
}

::google::protobuf::uint8* RemainTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemainTimeResponse)
  // required int32 remain = 1;
  if (has_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemainTimeResponse)
  return target;
}

int RemainTimeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 remain = 1;
    if (has_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemainTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemainTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemainTimeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemainTimeResponse::MergeFrom(const RemainTimeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remain()) {
      set_remain(from.remain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemainTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemainTimeResponse::CopyFrom(const RemainTimeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemainTimeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemainTimeResponse::Swap(RemainTimeResponse* other) {
  if (other != this) {
    std::swap(remain_, other->remain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemainTimeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemainTimeResponse_descriptor_;
  metadata.reflection = RemainTimeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankListResponse::kRankItemsFieldNumber;
#endif  // !_MSC_VER

RankListResponse::RankListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RankListResponse)
}

void RankListResponse::InitAsDefaultInstance() {
}

RankListResponse::RankListResponse(const RankListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RankListResponse)
}

void RankListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankListResponse::~RankListResponse() {
  // @@protoc_insertion_point(destructor:RankListResponse)
  SharedDtor();
}

void RankListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankListResponse_descriptor_;
}

const RankListResponse& RankListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

RankListResponse* RankListResponse::default_instance_ = NULL;

RankListResponse* RankListResponse::New() const {
  return new RankListResponse;
}

void RankListResponse::Clear() {
  rankitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RankListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RankItem rankItems = 1;
      case 1: {
        if (tag == 10) {
         parse_rankItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rankItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RankListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RankListResponse)
  return false;
#undef DO_
}

void RankListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RankListResponse)
  // repeated .RankItem rankItems = 1;
  for (int i = 0; i < this->rankitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RankListResponse)
}

::google::protobuf::uint8* RankListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RankListResponse)
  // repeated .RankItem rankItems = 1;
  for (int i = 0; i < this->rankitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RankListResponse)
  return target;
}

int RankListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .RankItem rankItems = 1;
  total_size += 1 * this->rankitems_size();
  for (int i = 0; i < this->rankitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankListResponse::MergeFrom(const RankListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankitems_.MergeFrom(from.rankitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankListResponse::CopyFrom(const RankListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rankitems())) return false;
  return true;
}

void RankListResponse::Swap(RankListResponse* other) {
  if (other != this) {
    rankitems_.Swap(&other->rankitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankListResponse_descriptor_;
  metadata.reflection = RankListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndResponse::kRankItemsFieldNumber;
#endif  // !_MSC_VER

GameEndResponse::GameEndResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameEndResponse)
}

void GameEndResponse::InitAsDefaultInstance() {
}

GameEndResponse::GameEndResponse(const GameEndResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameEndResponse)
}

void GameEndResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndResponse::~GameEndResponse() {
  // @@protoc_insertion_point(destructor:GameEndResponse)
  SharedDtor();
}

void GameEndResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndResponse_descriptor_;
}

const GameEndResponse& GameEndResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

GameEndResponse* GameEndResponse::default_instance_ = NULL;

GameEndResponse* GameEndResponse::New() const {
  return new GameEndResponse;
}

void GameEndResponse::Clear() {
  rankitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameEndResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RankItem rankItems = 1;
      case 1: {
        if (tag == 10) {
         parse_rankItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rankItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameEndResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameEndResponse)
  return false;
#undef DO_
}

void GameEndResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameEndResponse)
  // repeated .RankItem rankItems = 1;
  for (int i = 0; i < this->rankitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameEndResponse)
}

::google::protobuf::uint8* GameEndResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEndResponse)
  // repeated .RankItem rankItems = 1;
  for (int i = 0; i < this->rankitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEndResponse)
  return target;
}

int GameEndResponse::ByteSize() const {
  int total_size = 0;

  // repeated .RankItem rankItems = 1;
  total_size += 1 * this->rankitems_size();
  for (int i = 0; i < this->rankitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndResponse::MergeFrom(const GameEndResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankitems_.MergeFrom(from.rankitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndResponse::CopyFrom(const GameEndResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rankitems())) return false;
  return true;
}

void GameEndResponse::Swap(GameEndResponse* other) {
  if (other != this) {
    rankitems_.Swap(&other->rankitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndResponse_descriptor_;
  metadata.reflection = GameEndResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSkillRequest::kSkillFieldNumber;
#endif  // !_MSC_VER

PlayerSkillRequest::PlayerSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerSkillRequest)
}

void PlayerSkillRequest::InitAsDefaultInstance() {
}

PlayerSkillRequest::PlayerSkillRequest(const PlayerSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerSkillRequest)
}

void PlayerSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSkillRequest::~PlayerSkillRequest() {
  // @@protoc_insertion_point(destructor:PlayerSkillRequest)
  SharedDtor();
}

void PlayerSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSkillRequest_descriptor_;
}

const PlayerSkillRequest& PlayerSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PlayerSkillRequest* PlayerSkillRequest::default_instance_ = NULL;

PlayerSkillRequest* PlayerSkillRequest::New() const {
  return new PlayerSkillRequest;
}

void PlayerSkillRequest::Clear() {
  skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerSkillRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerSkillRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerSkillRequest)
  return false;
#undef DO_
}

void PlayerSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerSkillRequest)
  // required int32 skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerSkillRequest)
}

::google::protobuf::uint8* PlayerSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerSkillRequest)
  // required int32 skill = 1;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerSkillRequest)
  return target;
}

int PlayerSkillRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSkillRequest::MergeFrom(const PlayerSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSkillRequest::CopyFrom(const PlayerSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerSkillRequest::Swap(PlayerSkillRequest* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSkillRequest_descriptor_;
  metadata.reflection = PlayerSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSkillResponse::kPlayerSkillsFieldNumber;
#endif  // !_MSC_VER

PlayerSkillResponse::PlayerSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerSkillResponse)
}

void PlayerSkillResponse::InitAsDefaultInstance() {
}

PlayerSkillResponse::PlayerSkillResponse(const PlayerSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerSkillResponse)
}

void PlayerSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSkillResponse::~PlayerSkillResponse() {
  // @@protoc_insertion_point(destructor:PlayerSkillResponse)
  SharedDtor();
}

void PlayerSkillResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSkillResponse_descriptor_;
}

const PlayerSkillResponse& PlayerSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PlayerSkillResponse* PlayerSkillResponse::default_instance_ = NULL;

PlayerSkillResponse* PlayerSkillResponse::New() const {
  return new PlayerSkillResponse;
}

void PlayerSkillResponse::Clear() {
  playerskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerSkillResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerSkill playerSkills = 1;
      case 1: {
        if (tag == 10) {
         parse_playerSkills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerskills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_playerSkills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerSkillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerSkillResponse)
  return false;
#undef DO_
}

void PlayerSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerSkillResponse)
  // repeated .PlayerSkill playerSkills = 1;
  for (int i = 0; i < this->playerskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerSkillResponse)
}

::google::protobuf::uint8* PlayerSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerSkillResponse)
  // repeated .PlayerSkill playerSkills = 1;
  for (int i = 0; i < this->playerskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerSkillResponse)
  return target;
}

int PlayerSkillResponse::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerSkill playerSkills = 1;
  total_size += 1 * this->playerskills_size();
  for (int i = 0; i < this->playerskills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerskills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSkillResponse::MergeFrom(const PlayerSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerskills_.MergeFrom(from.playerskills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSkillResponse::CopyFrom(const PlayerSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSkillResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->playerskills())) return false;
  return true;
}

void PlayerSkillResponse::Swap(PlayerSkillResponse* other) {
  if (other != this) {
    playerskills_.Swap(&other->playerskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSkillResponse_descriptor_;
  metadata.reflection = PlayerSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSkill::kSkillFieldNumber;
const int PlayerSkill::kPlayerFieldNumber;
const int PlayerSkill::kStateFieldNumber;
const int PlayerSkill::kMapFieldNumber;
const int PlayerSkill::kDurationFieldNumber;
#endif  // !_MSC_VER

PlayerSkill::PlayerSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerSkill)
}

void PlayerSkill::InitAsDefaultInstance() {
  player_ = const_cast< ::Player*>(&::Player::default_instance());
}

PlayerSkill::PlayerSkill(const PlayerSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerSkill)
}

void PlayerSkill::SharedCtor() {
  _cached_size_ = 0;
  skill_ = 0;
  player_ = NULL;
  state_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSkill::~PlayerSkill() {
  // @@protoc_insertion_point(destructor:PlayerSkill)
  SharedDtor();
}

void PlayerSkill::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void PlayerSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSkill_descriptor_;
}

const PlayerSkill& PlayerSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PlayerSkill* PlayerSkill::default_instance_ = NULL;

PlayerSkill* PlayerSkill::New() const {
  return new PlayerSkill;
}

void PlayerSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(skill_, state_);
    if (has_player()) {
      if (player_ != NULL) player_->::Player::Clear();
    }
    duration_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // optional .Player player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_map;
        break;
      }

      // repeated .MapEntity map = 4;
      case 4: {
        if (tag == 34) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_map;
        if (input->ExpectTag(40)) goto parse_duration;
        break;
      }

      // optional int32 duration = 5;
      case 5: {
        if (tag == 40) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerSkill)
  return false;
#undef DO_
}

void PlayerSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerSkill)
  // optional int32 skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill(), output);
  }

  // optional .Player player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // repeated .MapEntity map = 4;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->map(i), output);
  }

  // optional int32 duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerSkill)
}

::google::protobuf::uint8* PlayerSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerSkill)
  // optional int32 skill = 1;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill(), target);
  }

  // optional .Player player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // repeated .MapEntity map = 4;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->map(i), target);
  }

  // optional int32 duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerSkill)
  return target;
}

int PlayerSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

    // optional .Player player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  // repeated .MapEntity map = 4;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSkill::MergeFrom(const PlayerSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_player()) {
      mutable_player()->::Player::MergeFrom(from.player());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSkill::CopyFrom(const PlayerSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSkill::IsInitialized() const {

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->map())) return false;
  return true;
}

void PlayerSkill::Swap(PlayerSkill* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(player_, other->player_);
    std::swap(state_, other->state_);
    map_.Swap(&other->map_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSkill_descriptor_;
  metadata.reflection = PlayerSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapEntity::kKeyFieldNumber;
const int MapEntity::kValueFieldNumber;
#endif  // !_MSC_VER

MapEntity::MapEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapEntity)
}

void MapEntity::InitAsDefaultInstance() {
}

MapEntity::MapEntity(const MapEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapEntity)
}

void MapEntity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapEntity::~MapEntity() {
  // @@protoc_insertion_point(destructor:MapEntity)
  SharedDtor();
}

void MapEntity::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MapEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapEntity_descriptor_;
}

const MapEntity& MapEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

MapEntity* MapEntity::default_instance_ = NULL;

MapEntity* MapEntity::New() const {
  return new MapEntity;
}

void MapEntity::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapEntity)
  return false;
#undef DO_
}

void MapEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapEntity)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapEntity)
}

::google::protobuf::uint8* MapEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapEntity)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapEntity)
  return target;
}

int MapEntity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapEntity::MergeFrom(const MapEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntity::CopyFrom(const MapEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapEntity::Swap(MapEntity* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapEntity_descriptor_;
  metadata.reflection = MapEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankItem::kRankFieldNumber;
const int RankItem::kUserInfoFieldNumber;
const int RankItem::kWeightFieldNumber;
const int RankItem::kRewardFieldNumber;
#endif  // !_MSC_VER

RankItem::RankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RankItem)
}

void RankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

RankItem::RankItem(const RankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RankItem)
}

void RankItem::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  userinfo_ = NULL;
  weight_ = 0;
  reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankItem::~RankItem() {
  // @@protoc_insertion_point(destructor:RankItem)
  SharedDtor();
}

void RankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void RankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankItem_descriptor_;
}

const RankItem& RankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

RankItem* RankItem::default_instance_ = NULL;

RankItem* RankItem::New() const {
  return new RankItem;
}

void RankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rank_, reward_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userInfo;
        break;
      }

      // optional .UserInfo userInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weight;
        break;
      }

      // optional int32 weight = 3;
      case 3: {
        if (tag == 24) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // optional int32 reward = 4;
      case 4: {
        if (tag == 32) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RankItem)
  return false;
#undef DO_
}

void RankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RankItem)
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional .UserInfo userInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // optional int32 weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weight(), output);
  }

  // optional int32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RankItem)
}

::google::protobuf::uint8* RankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RankItem)
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional .UserInfo userInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // optional int32 weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weight(), target);
  }

  // optional int32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RankItem)
  return target;
}

int RankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional .UserInfo userInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional int32 weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankItem::MergeFrom(const RankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankItem::CopyFrom(const RankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void RankItem::Swap(RankItem* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(weight_, other->weight_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankItem_descriptor_;
  metadata.reflection = RankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellVector::kCellIdFieldNumber;
const int CellVector::kAngleFieldNumber;
#endif  // !_MSC_VER

CellVector::CellVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CellVector)
}

void CellVector::InitAsDefaultInstance() {
}

CellVector::CellVector(const CellVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CellVector)
}

void CellVector::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellVector::~CellVector() {
  // @@protoc_insertion_point(destructor:CellVector)
  SharedDtor();
}

void CellVector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellVector_descriptor_;
}

const CellVector& CellVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

CellVector* CellVector::default_instance_ = NULL;

CellVector* CellVector::New() const {
  return new CellVector;
}

void CellVector::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CellVector*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cellid_, angle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CellVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cellId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_angle;
        break;
      }

      // optional int32 angle = 2;
      case 2: {
        if (tag == 16) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CellVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CellVector)
  return false;
#undef DO_
}

void CellVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CellVector)
  // required int32 cellId = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cellid(), output);
  }

  // optional int32 angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CellVector)
}

::google::protobuf::uint8* CellVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CellVector)
  // required int32 cellId = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cellid(), target);
  }

  // optional int32 angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CellVector)
  return target;
}

int CellVector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cellId = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }

    // optional int32 angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellVector::MergeFrom(const CellVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellVector::CopyFrom(const CellVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CellVector::Swap(CellVector* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellVector_descriptor_;
  metadata.reflection = CellVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerOperationRequest::kCellVectorFieldNumber;
#endif  // !_MSC_VER

PlayerOperationRequest::PlayerOperationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerOperationRequest)
}

void PlayerOperationRequest::InitAsDefaultInstance() {
}

PlayerOperationRequest::PlayerOperationRequest(const PlayerOperationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerOperationRequest)
}

void PlayerOperationRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerOperationRequest::~PlayerOperationRequest() {
  // @@protoc_insertion_point(destructor:PlayerOperationRequest)
  SharedDtor();
}

void PlayerOperationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerOperationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerOperationRequest_descriptor_;
}

const PlayerOperationRequest& PlayerOperationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PlayerOperationRequest* PlayerOperationRequest::default_instance_ = NULL;

PlayerOperationRequest* PlayerOperationRequest::New() const {
  return new PlayerOperationRequest;
}

void PlayerOperationRequest::Clear() {
  cellvector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerOperationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CellVector cellVector = 1;
      case 1: {
        if (tag == 10) {
         parse_cellVector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cellvector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cellVector;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerOperationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerOperationRequest)
  return false;
#undef DO_
}

void PlayerOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerOperationRequest)
  // repeated .CellVector cellVector = 1;
  for (int i = 0; i < this->cellvector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cellvector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerOperationRequest)
}

::google::protobuf::uint8* PlayerOperationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerOperationRequest)
  // repeated .CellVector cellVector = 1;
  for (int i = 0; i < this->cellvector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cellvector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerOperationRequest)
  return target;
}

int PlayerOperationRequest::ByteSize() const {
  int total_size = 0;

  // repeated .CellVector cellVector = 1;
  total_size += 1 * this->cellvector_size();
  for (int i = 0; i < this->cellvector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cellvector(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerOperationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerOperationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerOperationRequest::MergeFrom(const PlayerOperationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  cellvector_.MergeFrom(from.cellvector_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOperationRequest::CopyFrom(const PlayerOperationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOperationRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cellvector())) return false;
  return true;
}

void PlayerOperationRequest::Swap(PlayerOperationRequest* other) {
  if (other != this) {
    cellvector_.Swap(&other->cellvector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerOperationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerOperationRequest_descriptor_;
  metadata.reflection = PlayerOperationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUidFieldNumber;
const int UserInfo::kSkinFieldNumber;
const int UserInfo::kNicknameFieldNumber;
const int UserInfo::kAccountFieldNumber;
const int UserInfo::kUltimateSkillFieldNumber;
const int UserInfo::kGoldFieldNumber;
const int UserInfo::kStaminaFieldNumber;
const int UserInfo::kMaxStaminaFieldNumber;
const int UserInfo::kCountdownFieldNumber;
const int UserInfo::kPrivilegeFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  ultimateskill_ = const_cast< ::UltimateSkill*>(&::UltimateSkill::default_instance());
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  skin_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ultimateskill_ = NULL;
  gold_ = 0;
  stamina_ = 0;
  maxstamina_ = 0;
  countdown_ = 0;
  privilege_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (this != default_instance_) {
    delete ultimateskill_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, skin_);
    ZR_(gold_, maxstamina_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_ultimateskill()) {
      if (ultimateskill_ != NULL) ultimateskill_->::UltimateSkill::Clear();
    }
  }
  ZR_(countdown_, privilege_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skin;
        break;
      }

      // optional int32 skin = 2;
      case 2: {
        if (tag == 16) {
         parse_skin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_)));
          set_has_skin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (tag == 34) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ultimateSkill;
        break;
      }

      // optional .UltimateSkill ultimateSkill = 5;
      case 5: {
        if (tag == 42) {
         parse_ultimateSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ultimateskill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional int32 gold = 6;
      case 6: {
        if (tag == 48) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 7;
      case 7: {
        if (tag == 56) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxStamina;
        break;
      }

      // optional int32 maxStamina = 8;
      case 8: {
        if (tag == 64) {
         parse_maxStamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxstamina_)));
          set_has_maxstamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_countdown;
        break;
      }

      // optional int32 countdown = 9;
      case 9: {
        if (tag == 72) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_privilege;
        break;
      }

      // optional int32 privilege = 10;
      case 10: {
        if (tag == 80) {
         parse_privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privilege_)));
          set_has_privilege();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserInfo)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 skin = 2;
  if (has_skin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skin(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account(), output);
  }

  // optional .UltimateSkill ultimateSkill = 5;
  if (has_ultimateskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ultimateskill(), output);
  }

  // optional int32 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // optional int32 stamina = 7;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stamina(), output);
  }

  // optional int32 maxStamina = 8;
  if (has_maxstamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxstamina(), output);
  }

  // optional int32 countdown = 9;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->countdown(), output);
  }

  // optional int32 privilege = 10;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->privilege(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfo)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 skin = 2;
  if (has_skin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skin(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // optional .UltimateSkill ultimateSkill = 5;
  if (has_ultimateskill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ultimateskill(), target);
  }

  // optional int32 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold(), target);
  }

  // optional int32 stamina = 7;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stamina(), target);
  }

  // optional int32 maxStamina = 8;
  if (has_maxstamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxstamina(), target);
  }

  // optional int32 countdown = 9;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->countdown(), target);
  }

  // optional int32 privilege = 10;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->privilege(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 skin = 2;
    if (has_skin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional .UltimateSkill ultimateSkill = 5;
    if (has_ultimateskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ultimateskill());
    }

    // optional int32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 stamina = 7;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // optional int32 maxStamina = 8;
    if (has_maxstamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxstamina());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 countdown = 9;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

    // optional int32 privilege = 10;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privilege());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_skin()) {
      set_skin(from.skin());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ultimateskill()) {
      mutable_ultimateskill()->::UltimateSkill::MergeFrom(from.ultimateskill());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_maxstamina()) {
      set_maxstamina(from.maxstamina());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
    if (from.has_privilege()) {
      set_privilege(from.privilege());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ultimateskill()) {
    if (!this->ultimateskill().IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(skin_, other->skin_);
    std::swap(nickname_, other->nickname_);
    std::swap(account_, other->account_);
    std::swap(ultimateskill_, other->ultimateskill_);
    std::swap(gold_, other->gold_);
    std::swap(stamina_, other->stamina_);
    std::swap(maxstamina_, other->maxstamina_);
    std::swap(countdown_, other->countdown_);
    std::swap(privilege_, other->privilege_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Food::kIdFieldNumber;
const int Food::kSkinFieldNumber;
const int Food::kXFieldNumber;
const int Food::kYFieldNumber;
#endif  // !_MSC_VER

Food::Food()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Food)
}

void Food::InitAsDefaultInstance() {
}

Food::Food(const Food& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Food)
}

void Food::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  skin_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Food::~Food() {
  // @@protoc_insertion_point(destructor:Food)
  SharedDtor();
}

void Food::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Food::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Food::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Food_descriptor_;
}

const Food& Food::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Food* Food::default_instance_ = NULL;

Food* Food::New() const {
  return new Food;
}

void Food::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Food*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Food::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Food)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skin;
        break;
      }

      // optional int32 skin = 2;
      case 2: {
        if (tag == 16) {
         parse_skin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_)));
          set_has_skin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional int32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Food)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Food)
  return false;
#undef DO_
}

void Food::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Food)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 skin = 2;
  if (has_skin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skin(), output);
  }

  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Food)
}

::google::protobuf::uint8* Food::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Food)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 skin = 2;
  if (has_skin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skin(), target);
  }

  // optional int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Food)
  return target;
}

int Food::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 skin = 2;
    if (has_skin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin());
    }

    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Food::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Food* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Food*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Food::MergeFrom(const Food& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skin()) {
      set_skin(from.skin());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Food::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Food::CopyFrom(const Food& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Food::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Food::Swap(Food* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skin_, other->skin_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Food::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Food_descriptor_;
  metadata.reflection = Food_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cell::kIdFieldNumber;
const int Cell::kXFieldNumber;
const int Cell::kYFieldNumber;
const int Cell::kRadiusFieldNumber;
const int Cell::kSpeedFieldNumber;
const int Cell::kAngleFieldNumber;
const int Cell::kFromIdFieldNumber;
const int Cell::kMergeIdFieldNumber;
const int Cell::kStatusFieldNumber;
const int Cell::kMagnetFoodsFieldNumber;
#endif  // !_MSC_VER

Cell::Cell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cell)
}

void Cell::InitAsDefaultInstance() {
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cell)
}

void Cell::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  radius_ = 0;
  speed_ = 0;
  angle_ = 0;
  fromid_ = 0;
  mergeid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New() const {
  return new Cell;
}

void Cell::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cell*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, mergeid_);
  }
  status_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  magnetfoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_radius;
        break;
      }

      // optional int32 radius = 4;
      case 4: {
        if (tag == 32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }

      // optional int32 speed = 5;
      case 5: {
        if (tag == 40) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_angle;
        break;
      }

      // optional int32 angle = 6;
      case 6: {
        if (tag == 48) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fromId;
        break;
      }

      // optional int32 fromId = 7;
      case 7: {
        if (tag == 56) {
         parse_fromId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mergeId;
        break;
      }

      // optional int32 mergeId = 8;
      case 8: {
        if (tag == 64) {
         parse_mergeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mergeid_)));
          set_has_mergeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // optional int32 status = 9;
      case 9: {
        if (tag == 72) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_magnetFoods;
        break;
      }

      // repeated .FoodArea magnetFoods = 10;
      case 10: {
        if (tag == 82) {
         parse_magnetFoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_magnetfoods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_magnetFoods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cell)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->radius(), output);
  }

  // optional int32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->speed(), output);
  }

  // optional int32 angle = 6;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->angle(), output);
  }

  // optional int32 fromId = 7;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fromid(), output);
  }

  // optional int32 mergeId = 8;
  if (has_mergeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mergeid(), output);
  }

  // optional int32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status(), output);
  }

  // repeated .FoodArea magnetFoods = 10;
  for (int i = 0; i < this->magnetfoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->magnetfoods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cell)
}

::google::protobuf::uint8* Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cell)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional int32 radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->radius(), target);
  }

  // optional int32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speed(), target);
  }

  // optional int32 angle = 6;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->angle(), target);
  }

  // optional int32 fromId = 7;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fromid(), target);
  }

  // optional int32 mergeId = 8;
  if (has_mergeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mergeid(), target);
  }

  // optional int32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status(), target);
  }

  // repeated .FoodArea magnetFoods = 10;
  for (int i = 0; i < this->magnetfoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->magnetfoods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cell)
  return target;
}

int Cell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 radius = 4;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // optional int32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 angle = 6;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

    // optional int32 fromId = 7;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromid());
    }

    // optional int32 mergeId = 8;
    if (has_mergeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mergeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .FoodArea magnetFoods = 10;
  total_size += 1 * this->magnetfoods_size();
  for (int i = 0; i < this->magnetfoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->magnetfoods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
  GOOGLE_CHECK_NE(&from, this);
  magnetfoods_.MergeFrom(from.magnetfoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_mergeid()) {
      set_mergeid(from.mergeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->magnetfoods())) return false;
  return true;
}

void Cell::Swap(Cell* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(radius_, other->radius_);
    std::swap(speed_, other->speed_);
    std::swap(angle_, other->angle_);
    std::swap(fromid_, other->fromid_);
    std::swap(mergeid_, other->mergeid_);
    std::swap(status_, other->status_);
    magnetfoods_.Swap(&other->magnetfoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Player::kUserInfoFieldNumber;
const int Player::kWeightFieldNumber;
const int Player::kCellsFieldNumber;
const int Player::kStatusFieldNumber;
const int Player::kUltimateSkillProgressFieldNumber;
const int Player::kBeKilledUserInfoFieldNumber;
const int Player::kSuperRenewInfoFieldNumber;
#endif  // !_MSC_VER

Player::Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Player)
}

void Player::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
  bekilleduserinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
  superrenewinfo_ = const_cast< ::SuperRenewInfo*>(&::SuperRenewInfo::default_instance());
}

Player::Player(const Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Player)
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  weight_ = 0;
  status_ = 0;
  ultimateskillprogress_ = 0;
  bekilleduserinfo_ = NULL;
  superrenewinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:Player)
  SharedDtor();
}

void Player::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete bekilleduserinfo_;
    delete superrenewinfo_;
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New() const {
  return new Player;
}

void Player::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Player*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(weight_, status_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
    ultimateskillprogress_ = 0;
    if (has_bekilleduserinfo()) {
      if (bekilleduserinfo_ != NULL) bekilleduserinfo_->::UserInfo::Clear();
    }
    if (has_superrenewinfo()) {
      if (superrenewinfo_ != NULL) superrenewinfo_->::SuperRenewInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserInfo userInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional int32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        break;
      }

      // repeated .Cell cells = 3;
      case 3: {
        if (tag == 26) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ultimateSkillProgress;
        break;
      }

      // optional int32 ultimateSkillProgress = 5;
      case 5: {
        if (tag == 40) {
         parse_ultimateSkillProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultimateskillprogress_)));
          set_has_ultimateskillprogress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_beKilledUserInfo;
        break;
      }

      // optional .UserInfo beKilledUserInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_beKilledUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bekilleduserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_superRenewInfo;
        break;
      }

      // optional .SuperRenewInfo superRenewInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_superRenewInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_superrenewinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Player)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // repeated .Cell cells = 3;
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells(i), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 ultimateSkillProgress = 5;
  if (has_ultimateskillprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ultimateskillprogress(), output);
  }

  // optional .UserInfo beKilledUserInfo = 6;
  if (has_bekilleduserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bekilleduserinfo(), output);
  }

  // optional .SuperRenewInfo superRenewInfo = 7;
  if (has_superrenewinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->superrenewinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Player)
}

::google::protobuf::uint8* Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Player)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // repeated .Cell cells = 3;
  for (int i = 0; i < this->cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cells(i), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional int32 ultimateSkillProgress = 5;
  if (has_ultimateskillprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ultimateskillprogress(), target);
  }

  // optional .UserInfo beKilledUserInfo = 6;
  if (has_bekilleduserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bekilleduserinfo(), target);
  }

  // optional .SuperRenewInfo superRenewInfo = 7;
  if (has_superrenewinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->superrenewinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Player)
  return target;
}

int Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserInfo userInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional int32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 ultimateSkillProgress = 5;
    if (has_ultimateskillprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultimateskillprogress());
    }

    // optional .UserInfo beKilledUserInfo = 6;
    if (has_bekilleduserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bekilleduserinfo());
    }

    // optional .SuperRenewInfo superRenewInfo = 7;
    if (has_superrenewinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->superrenewinfo());
    }

  }
  // repeated .Cell cells = 3;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_ultimateskillprogress()) {
      set_ultimateskillprogress(from.ultimateskillprogress());
    }
    if (from.has_bekilleduserinfo()) {
      mutable_bekilleduserinfo()->::UserInfo::MergeFrom(from.bekilleduserinfo());
    }
    if (from.has_superrenewinfo()) {
      mutable_superrenewinfo()->::SuperRenewInfo::MergeFrom(from.superrenewinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->cells())) return false;
  if (has_bekilleduserinfo()) {
    if (!this->bekilleduserinfo().IsInitialized()) return false;
  }
  return true;
}

void Player::Swap(Player* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(weight_, other->weight_);
    cells_.Swap(&other->cells_);
    std::swap(status_, other->status_);
    std::swap(ultimateskillprogress_, other->ultimateskillprogress_);
    std::swap(bekilleduserinfo_, other->bekilleduserinfo_);
    std::swap(superrenewinfo_, other->superrenewinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperRenewInfo::kGoldFieldNumber;
const int SuperRenewInfo::kWeightFieldNumber;
const int SuperRenewInfo::kPercentFieldNumber;
#endif  // !_MSC_VER

SuperRenewInfo::SuperRenewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SuperRenewInfo)
}

void SuperRenewInfo::InitAsDefaultInstance() {
}

SuperRenewInfo::SuperRenewInfo(const SuperRenewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SuperRenewInfo)
}

void SuperRenewInfo::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0;
  weight_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperRenewInfo::~SuperRenewInfo() {
  // @@protoc_insertion_point(destructor:SuperRenewInfo)
  SharedDtor();
}

void SuperRenewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperRenewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperRenewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperRenewInfo_descriptor_;
}

const SuperRenewInfo& SuperRenewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

SuperRenewInfo* SuperRenewInfo::default_instance_ = NULL;

SuperRenewInfo* SuperRenewInfo::New() const {
  return new SuperRenewInfo;
}

void SuperRenewInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SuperRenewInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gold_, percent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperRenewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SuperRenewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gold = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional int32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_percent;
        break;
      }

      // optional int32 percent = 3;
      case 3: {
        if (tag == 24) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SuperRenewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SuperRenewInfo)
  return false;
#undef DO_
}

void SuperRenewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SuperRenewInfo)
  // optional int32 gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // optional int32 percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SuperRenewInfo)
}

::google::protobuf::uint8* SuperRenewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SuperRenewInfo)
  // optional int32 gold = 1;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // optional int32 percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SuperRenewInfo)
  return target;
}

int SuperRenewInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int32 percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperRenewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperRenewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperRenewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperRenewInfo::MergeFrom(const SuperRenewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperRenewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperRenewInfo::CopyFrom(const SuperRenewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperRenewInfo::IsInitialized() const {

  return true;
}

void SuperRenewInfo::Swap(SuperRenewInfo* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(weight_, other->weight_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperRenewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperRenewInfo_descriptor_;
  metadata.reflection = SuperRenewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kWidthFieldNumber;
const int RoomInfo::kHeightFieldNumber;
const int RoomInfo::kRemainTimeFieldNumber;
const int RoomInfo::kFoodRadiusFieldNumber;
const int RoomInfo::kPlayersFieldNumber;
const int RoomInfo::kFoodAreasFieldNumber;
const int RoomInfo::kRankItemsFieldNumber;
const int RoomInfo::kAsylumsFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomInfo)
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoomInfo)
}

void RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  remaintime_ = 0;
  foodradius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, foodradius_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  foodareas_.Clear();
  rankitems_.Clear();
  asylums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remainTime;
        break;
      }

      // optional int32 remainTime = 3;
      case 3: {
        if (tag == 24) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_foodRadius;
        break;
      }

      // optional int32 foodRadius = 4;
      case 4: {
        if (tag == 32) {
         parse_foodRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foodradius_)));
          set_has_foodradius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_players;
        break;
      }

      // repeated .Player players = 5;
      case 5: {
        if (tag == 42) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_players;
        if (input->ExpectTag(50)) goto parse_foodAreas;
        break;
      }

      // repeated .FoodArea foodAreas = 6;
      case 6: {
        if (tag == 50) {
         parse_foodAreas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_foodareas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_foodAreas;
        if (input->ExpectTag(58)) goto parse_rankItems;
        break;
      }

      // repeated .RankItem rankItems = 7;
      case 7: {
        if (tag == 58) {
         parse_rankItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rankItems;
        if (input->ExpectTag(66)) goto parse_asylums;
        break;
      }

      // repeated .Asylum asylums = 8;
      case 8: {
        if (tag == 66) {
         parse_asylums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_asylums()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_asylums;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomInfo)
  // required int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 remainTime = 3;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remaintime(), output);
  }

  // optional int32 foodRadius = 4;
  if (has_foodradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->foodradius(), output);
  }

  // repeated .Player players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }

  // repeated .FoodArea foodAreas = 6;
  for (int i = 0; i < this->foodareas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->foodareas(i), output);
  }

  // repeated .RankItem rankItems = 7;
  for (int i = 0; i < this->rankitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rankitems(i), output);
  }

  // repeated .Asylum asylums = 8;
  for (int i = 0; i < this->asylums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->asylums(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoomInfo)
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomInfo)
  // required int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 remainTime = 3;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remaintime(), target);
  }

  // optional int32 foodRadius = 4;
  if (has_foodradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->foodradius(), target);
  }

  // repeated .Player players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(i), target);
  }

  // repeated .FoodArea foodAreas = 6;
  for (int i = 0; i < this->foodareas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->foodareas(i), target);
  }

  // repeated .RankItem rankItems = 7;
  for (int i = 0; i < this->rankitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rankitems(i), target);
  }

  // repeated .Asylum asylums = 8;
  for (int i = 0; i < this->asylums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->asylums(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomInfo)
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 remainTime = 3;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // optional int32 foodRadius = 4;
    if (has_foodradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foodradius());
    }

  }
  // repeated .Player players = 5;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .FoodArea foodAreas = 6;
  total_size += 1 * this->foodareas_size();
  for (int i = 0; i < this->foodareas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->foodareas(i));
  }

  // repeated .RankItem rankItems = 7;
  total_size += 1 * this->rankitems_size();
  for (int i = 0; i < this->rankitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankitems(i));
  }

  // repeated .Asylum asylums = 8;
  total_size += 1 * this->asylums_size();
  for (int i = 0; i < this->asylums_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->asylums(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  foodareas_.MergeFrom(from.foodareas_);
  rankitems_.MergeFrom(from.rankitems_);
  asylums_.MergeFrom(from.asylums_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_foodradius()) {
      set_foodradius(from.foodradius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->foodareas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rankitems())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->asylums())) return false;
  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(foodradius_, other->foodradius_);
    players_.Swap(&other->players_);
    foodareas_.Swap(&other->foodareas_);
    rankitems_.Swap(&other->rankitems_);
    asylums_.Swap(&other->asylums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStateResponse::kStateFieldNumber;
const int GameStateResponse::kRoomIdFieldNumber;
#endif  // !_MSC_VER

GameStateResponse::GameStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStateResponse)
}

void GameStateResponse::InitAsDefaultInstance() {
}

GameStateResponse::GameStateResponse(const GameStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameStateResponse)
}

void GameStateResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStateResponse::~GameStateResponse() {
  // @@protoc_insertion_point(destructor:GameStateResponse)
  SharedDtor();
}

void GameStateResponse::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void GameStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStateResponse_descriptor_;
}

const GameStateResponse& GameStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

GameStateResponse* GameStateResponse::default_instance_ = NULL;

GameStateResponse* GameStateResponse::New() const {
  return new GameStateResponse;
}

void GameStateResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    state_ = 0;
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomId;
        break;
      }

      // optional string roomId = 2;
      case 2: {
        if (tag == 18) {
         parse_roomId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStateResponse)
  return false;
#undef DO_
}

void GameStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStateResponse)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameStateResponse)
}

::google::protobuf::uint8* GameStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStateResponse)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStateResponse)
  return target;
}

int GameStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStateResponse::MergeFrom(const GameStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStateResponse::CopyFrom(const GameStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameStateResponse::Swap(GameStateResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStateResponse_descriptor_;
  metadata.reflection = GameStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameReadyRequest::kRoomIdFieldNumber;
#endif  // !_MSC_VER

GameReadyRequest::GameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameReadyRequest)
}

void GameReadyRequest::InitAsDefaultInstance() {
}

GameReadyRequest::GameReadyRequest(const GameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameReadyRequest)
}

void GameReadyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameReadyRequest::~GameReadyRequest() {
  // @@protoc_insertion_point(destructor:GameReadyRequest)
  SharedDtor();
}

void GameReadyRequest::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void GameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameReadyRequest_descriptor_;
}

const GameReadyRequest& GameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

GameReadyRequest* GameReadyRequest::default_instance_ = NULL;

GameReadyRequest* GameReadyRequest::New() const {
  return new GameReadyRequest;
}

void GameReadyRequest::Clear() {
  if (has_roomid()) {
    if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      roomid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameReadyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameReadyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameReadyRequest)
  return false;
#undef DO_
}

void GameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameReadyRequest)
  // optional string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameReadyRequest)
}

::google::protobuf::uint8* GameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameReadyRequest)
  // optional string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameReadyRequest)
  return target;
}

int GameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameReadyRequest::MergeFrom(const GameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameReadyRequest::CopyFrom(const GameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReadyRequest::IsInitialized() const {

  return true;
}

void GameReadyRequest::Swap(GameReadyRequest* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameReadyRequest_descriptor_;
  metadata.reflection = GameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UltimateSkillChooseRequest::kUltimateSkillFieldNumber;
#endif  // !_MSC_VER

UltimateSkillChooseRequest::UltimateSkillChooseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UltimateSkillChooseRequest)
}

void UltimateSkillChooseRequest::InitAsDefaultInstance() {
}

UltimateSkillChooseRequest::UltimateSkillChooseRequest(const UltimateSkillChooseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UltimateSkillChooseRequest)
}

void UltimateSkillChooseRequest::SharedCtor() {
  _cached_size_ = 0;
  ultimateskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltimateSkillChooseRequest::~UltimateSkillChooseRequest() {
  // @@protoc_insertion_point(destructor:UltimateSkillChooseRequest)
  SharedDtor();
}

void UltimateSkillChooseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UltimateSkillChooseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltimateSkillChooseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltimateSkillChooseRequest_descriptor_;
}

const UltimateSkillChooseRequest& UltimateSkillChooseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

UltimateSkillChooseRequest* UltimateSkillChooseRequest::default_instance_ = NULL;

UltimateSkillChooseRequest* UltimateSkillChooseRequest::New() const {
  return new UltimateSkillChooseRequest;
}

void UltimateSkillChooseRequest::Clear() {
  ultimateskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UltimateSkillChooseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UltimateSkillChooseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ultimateSkill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ultimateskill_)));
          set_has_ultimateskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UltimateSkillChooseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UltimateSkillChooseRequest)
  return false;
#undef DO_
}

void UltimateSkillChooseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UltimateSkillChooseRequest)
  // optional int32 ultimateSkill = 1;
  if (has_ultimateskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ultimateskill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UltimateSkillChooseRequest)
}

::google::protobuf::uint8* UltimateSkillChooseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UltimateSkillChooseRequest)
  // optional int32 ultimateSkill = 1;
  if (has_ultimateskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ultimateskill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UltimateSkillChooseRequest)
  return target;
}

int UltimateSkillChooseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ultimateSkill = 1;
    if (has_ultimateskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ultimateskill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltimateSkillChooseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UltimateSkillChooseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UltimateSkillChooseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UltimateSkillChooseRequest::MergeFrom(const UltimateSkillChooseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ultimateskill()) {
      set_ultimateskill(from.ultimateskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UltimateSkillChooseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltimateSkillChooseRequest::CopyFrom(const UltimateSkillChooseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltimateSkillChooseRequest::IsInitialized() const {

  return true;
}

void UltimateSkillChooseRequest::Swap(UltimateSkillChooseRequest* other) {
  if (other != this) {
    std::swap(ultimateskill_, other->ultimateskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UltimateSkillChooseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltimateSkillChooseRequest_descriptor_;
  metadata.reflection = UltimateSkillChooseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UltimateSkillChooseResponse::UltimateSkillChooseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UltimateSkillChooseResponse)
}

void UltimateSkillChooseResponse::InitAsDefaultInstance() {
}

UltimateSkillChooseResponse::UltimateSkillChooseResponse(const UltimateSkillChooseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UltimateSkillChooseResponse)
}

void UltimateSkillChooseResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltimateSkillChooseResponse::~UltimateSkillChooseResponse() {
  // @@protoc_insertion_point(destructor:UltimateSkillChooseResponse)
  SharedDtor();
}

void UltimateSkillChooseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UltimateSkillChooseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltimateSkillChooseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltimateSkillChooseResponse_descriptor_;
}

const UltimateSkillChooseResponse& UltimateSkillChooseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

UltimateSkillChooseResponse* UltimateSkillChooseResponse::default_instance_ = NULL;

UltimateSkillChooseResponse* UltimateSkillChooseResponse::New() const {
  return new UltimateSkillChooseResponse;
}

void UltimateSkillChooseResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UltimateSkillChooseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UltimateSkillChooseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:UltimateSkillChooseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UltimateSkillChooseResponse)
  return false;
#undef DO_
}

void UltimateSkillChooseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UltimateSkillChooseResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UltimateSkillChooseResponse)
}

::google::protobuf::uint8* UltimateSkillChooseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UltimateSkillChooseResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UltimateSkillChooseResponse)
  return target;
}

int UltimateSkillChooseResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltimateSkillChooseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UltimateSkillChooseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UltimateSkillChooseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UltimateSkillChooseResponse::MergeFrom(const UltimateSkillChooseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UltimateSkillChooseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltimateSkillChooseResponse::CopyFrom(const UltimateSkillChooseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltimateSkillChooseResponse::IsInitialized() const {

  return true;
}

void UltimateSkillChooseResponse::Swap(UltimateSkillChooseResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UltimateSkillChooseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltimateSkillChooseResponse_descriptor_;
  metadata.reflection = UltimateSkillChooseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRenewalRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

PlayerRenewalRequest::PlayerRenewalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerRenewalRequest)
}

void PlayerRenewalRequest::InitAsDefaultInstance() {
}

PlayerRenewalRequest::PlayerRenewalRequest(const PlayerRenewalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerRenewalRequest)
}

void PlayerRenewalRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRenewalRequest::~PlayerRenewalRequest() {
  // @@protoc_insertion_point(destructor:PlayerRenewalRequest)
  SharedDtor();
}

void PlayerRenewalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRenewalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRenewalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRenewalRequest_descriptor_;
}

const PlayerRenewalRequest& PlayerRenewalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PlayerRenewalRequest* PlayerRenewalRequest::default_instance_ = NULL;

PlayerRenewalRequest* PlayerRenewalRequest::New() const {
  return new PlayerRenewalRequest;
}

void PlayerRenewalRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRenewalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerRenewalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerRenewalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerRenewalRequest)
  return false;
#undef DO_
}

void PlayerRenewalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerRenewalRequest)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerRenewalRequest)
}

::google::protobuf::uint8* PlayerRenewalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerRenewalRequest)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerRenewalRequest)
  return target;
}

int PlayerRenewalRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRenewalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRenewalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRenewalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRenewalRequest::MergeFrom(const PlayerRenewalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRenewalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRenewalRequest::CopyFrom(const PlayerRenewalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRenewalRequest::IsInitialized() const {

  return true;
}

void PlayerRenewalRequest::Swap(PlayerRenewalRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRenewalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRenewalRequest_descriptor_;
  metadata.reflection = PlayerRenewalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerRenewalResponse::PlayerRenewalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerRenewalResponse)
}

void PlayerRenewalResponse::InitAsDefaultInstance() {
}

PlayerRenewalResponse::PlayerRenewalResponse(const PlayerRenewalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerRenewalResponse)
}

void PlayerRenewalResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRenewalResponse::~PlayerRenewalResponse() {
  // @@protoc_insertion_point(destructor:PlayerRenewalResponse)
  SharedDtor();
}

void PlayerRenewalResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRenewalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRenewalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRenewalResponse_descriptor_;
}

const PlayerRenewalResponse& PlayerRenewalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PlayerRenewalResponse* PlayerRenewalResponse::default_instance_ = NULL;

PlayerRenewalResponse* PlayerRenewalResponse::New() const {
  return new PlayerRenewalResponse;
}

void PlayerRenewalResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRenewalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerRenewalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerRenewalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerRenewalResponse)
  return false;
#undef DO_
}

void PlayerRenewalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerRenewalResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerRenewalResponse)
}

::google::protobuf::uint8* PlayerRenewalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerRenewalResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerRenewalResponse)
  return target;
}

int PlayerRenewalResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRenewalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRenewalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRenewalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRenewalResponse::MergeFrom(const PlayerRenewalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRenewalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRenewalResponse::CopyFrom(const PlayerRenewalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRenewalResponse::IsInitialized() const {

  return true;
}

void PlayerRenewalResponse::Swap(PlayerRenewalResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRenewalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRenewalResponse_descriptor_;
  metadata.reflection = PlayerRenewalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Asylum::kIdFieldNumber;
const int Asylum::kSkinFieldNumber;
const int Asylum::kXFieldNumber;
const int Asylum::kYFieldNumber;
const int Asylum::kRadiusFieldNumber;
#endif  // !_MSC_VER

Asylum::Asylum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Asylum)
}

void Asylum::InitAsDefaultInstance() {
}

Asylum::Asylum(const Asylum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Asylum)
}

void Asylum::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  skin_ = 0;
  x_ = 0;
  y_ = 0;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Asylum::~Asylum() {
  // @@protoc_insertion_point(destructor:Asylum)
  SharedDtor();
}

void Asylum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Asylum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Asylum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Asylum_descriptor_;
}

const Asylum& Asylum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Asylum* Asylum::default_instance_ = NULL;

Asylum* Asylum::New() const {
  return new Asylum;
}

void Asylum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Asylum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, radius_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Asylum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Asylum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skin;
        break;
      }

      // optional int32 skin = 2;
      case 2: {
        if (tag == 16) {
         parse_skin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_)));
          set_has_skin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // optional float x = 3;
      case 3: {
        if (tag == 29) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // optional float y = 4;
      case 4: {
        if (tag == 37) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_radius;
        break;
      }

      // optional float radius = 5;
      case 5: {
        if (tag == 45) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Asylum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Asylum)
  return false;
#undef DO_
}

void Asylum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Asylum)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 skin = 2;
  if (has_skin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skin(), output);
  }

  // optional float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float radius = 5;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Asylum)
}

::google::protobuf::uint8* Asylum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Asylum)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 skin = 2;
  if (has_skin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skin(), target);
  }

  // optional float x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float radius = 5;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Asylum)
  return target;
}

int Asylum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 skin = 2;
    if (has_skin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin());
    }

    // optional float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float radius = 5;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Asylum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Asylum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Asylum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Asylum::MergeFrom(const Asylum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skin()) {
      set_skin(from.skin());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Asylum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asylum::CopyFrom(const Asylum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asylum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Asylum::Swap(Asylum* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skin_, other->skin_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Asylum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Asylum_descriptor_;
  metadata.reflection = Asylum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Prop::kIdFieldNumber;
const int Prop::kRemainDayFieldNumber;
#endif  // !_MSC_VER

Prop::Prop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Prop)
}

void Prop::InitAsDefaultInstance() {
}

Prop::Prop(const Prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Prop)
}

void Prop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  remainday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Prop::~Prop() {
  // @@protoc_insertion_point(destructor:Prop)
  SharedDtor();
}

void Prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Prop_descriptor_;
}

const Prop& Prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Prop* Prop::default_instance_ = NULL;

Prop* Prop::New() const {
  return new Prop;
}

void Prop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Prop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, remainday_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Prop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remainDay;
        break;
      }

      // required int32 remainDay = 2;
      case 2: {
        if (tag == 16) {
         parse_remainDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainday_)));
          set_has_remainday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Prop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Prop)
  return false;
#undef DO_
}

void Prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Prop)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 remainDay = 2;
  if (has_remainday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remainday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Prop)
}

::google::protobuf::uint8* Prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Prop)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 remainDay = 2;
  if (has_remainday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remainday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Prop)
  return target;
}

int Prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 remainDay = 2;
    if (has_remainday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Prop::MergeFrom(const Prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_remainday()) {
      set_remainday(from.remainday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prop::CopyFrom(const Prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Prop::Swap(Prop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(remainday_, other->remainday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Prop_descriptor_;
  metadata.reflection = Prop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackpackResponse::kSkinsFieldNumber;
const int BackpackResponse::kSkillsFieldNumber;
#endif  // !_MSC_VER

BackpackResponse::BackpackResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackpackResponse)
}

void BackpackResponse::InitAsDefaultInstance() {
}

BackpackResponse::BackpackResponse(const BackpackResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackpackResponse)
}

void BackpackResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackpackResponse::~BackpackResponse() {
  // @@protoc_insertion_point(destructor:BackpackResponse)
  SharedDtor();
}

void BackpackResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackpackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackpackResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackpackResponse_descriptor_;
}

const BackpackResponse& BackpackResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

BackpackResponse* BackpackResponse::default_instance_ = NULL;

BackpackResponse* BackpackResponse::New() const {
  return new BackpackResponse;
}

void BackpackResponse::Clear() {
  skins_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackpackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackpackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Prop skins = 1;
      case 1: {
        if (tag == 10) {
         parse_skins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skins;
        if (input->ExpectTag(18)) goto parse_skills;
        break;
      }

      // repeated .Prop skills = 2;
      case 2: {
        if (tag == 18) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BackpackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackpackResponse)
  return false;
#undef DO_
}

void BackpackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackpackResponse)
  // repeated .Prop skins = 1;
  for (int i = 0; i < this->skins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skins(i), output);
  }

  // repeated .Prop skills = 2;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackpackResponse)
}

::google::protobuf::uint8* BackpackResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackpackResponse)
  // repeated .Prop skins = 1;
  for (int i = 0; i < this->skins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skins(i), target);
  }

  // repeated .Prop skills = 2;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackpackResponse)
  return target;
}

int BackpackResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Prop skins = 1;
  total_size += 1 * this->skins_size();
  for (int i = 0; i < this->skins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skins(i));
  }

  // repeated .Prop skills = 2;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackpackResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackpackResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackpackResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackpackResponse::MergeFrom(const BackpackResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  skins_.MergeFrom(from.skins_);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackpackResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackpackResponse::CopyFrom(const BackpackResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackpackResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->skins())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skills())) return false;
  return true;
}

void BackpackResponse::Swap(BackpackResponse* other) {
  if (other != this) {
    skins_.Swap(&other->skins_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackpackResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackpackResponse_descriptor_;
  metadata.reflection = BackpackResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkinMerchandise::kIdFieldNumber;
const int SkinMerchandise::kNameFieldNumber;
const int SkinMerchandise::kPropIdFieldNumber;
const int SkinMerchandise::kPriceFieldNumber;
const int SkinMerchandise::kAvailableDaysFieldNumber;
const int SkinMerchandise::kDescriptionFieldNumber;
const int SkinMerchandise::kTagFieldNumber;
const int SkinMerchandise::kTypeFieldNumber;
#endif  // !_MSC_VER

SkinMerchandise::SkinMerchandise()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkinMerchandise)
}

void SkinMerchandise::InitAsDefaultInstance() {
}

SkinMerchandise::SkinMerchandise(const SkinMerchandise& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkinMerchandise)
}

void SkinMerchandise::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propid_ = 0;
  price_ = 0;
  availabledays_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkinMerchandise::~SkinMerchandise() {
  // @@protoc_insertion_point(destructor:SkinMerchandise)
  SharedDtor();
}

void SkinMerchandise::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void SkinMerchandise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkinMerchandise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkinMerchandise_descriptor_;
}

const SkinMerchandise& SkinMerchandise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

SkinMerchandise* SkinMerchandise::default_instance_ = NULL;

SkinMerchandise* SkinMerchandise::New() const {
  return new SkinMerchandise;
}

void SkinMerchandise::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkinMerchandise*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(propid_, price_);
    ZR_(availabledays_, type_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkinMerchandise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkinMerchandise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propId;
        break;
      }

      // required int32 propId = 3;
      case 3: {
        if (tag == 24) {
         parse_propId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required int32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_availableDays;
        break;
      }

      // required int32 availableDays = 5;
      case 5: {
        if (tag == 40) {
         parse_availableDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &availabledays_)));
          set_has_availabledays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tag;
        break;
      }

      // optional int32 tag = 7;
      case 7: {
        if (tag == 56) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional int32 type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkinMerchandise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkinMerchandise)
  return false;
#undef DO_
}

void SkinMerchandise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkinMerchandise)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 propId = 3;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->propid(), output);
  }

  // required int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // required int32 availableDays = 5;
  if (has_availabledays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->availabledays(), output);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional int32 tag = 7;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tag(), output);
  }

  // optional int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkinMerchandise)
}

::google::protobuf::uint8* SkinMerchandise::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkinMerchandise)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 propId = 3;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->propid(), target);
  }

  // required int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // required int32 availableDays = 5;
  if (has_availabledays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->availabledays(), target);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional int32 tag = 7;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tag(), target);
  }

  // optional int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkinMerchandise)
  return target;
}

int SkinMerchandise::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 propId = 3;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // required int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 availableDays = 5;
    if (has_availabledays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->availabledays());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 tag = 7;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkinMerchandise::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkinMerchandise* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkinMerchandise*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkinMerchandise::MergeFrom(const SkinMerchandise& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_availabledays()) {
      set_availabledays(from.availabledays());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkinMerchandise::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkinMerchandise::CopyFrom(const SkinMerchandise& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinMerchandise::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SkinMerchandise::Swap(SkinMerchandise* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(propid_, other->propid_);
    std::swap(price_, other->price_);
    std::swap(availabledays_, other->availabledays_);
    std::swap(description_, other->description_);
    std::swap(tag_, other->tag_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkinMerchandise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkinMerchandise_descriptor_;
  metadata.reflection = SkinMerchandise_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillMerchandise::kIdFieldNumber;
const int SkillMerchandise::kNameFieldNumber;
const int SkillMerchandise::kPropIdFieldNumber;
const int SkillMerchandise::kPriceFieldNumber;
const int SkillMerchandise::kAvailableDaysFieldNumber;
const int SkillMerchandise::kDescriptionFieldNumber;
const int SkillMerchandise::kFoodIdFieldNumber;
const int SkillMerchandise::kTypeFieldNumber;
#endif  // !_MSC_VER

SkillMerchandise::SkillMerchandise()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkillMerchandise)
}

void SkillMerchandise::InitAsDefaultInstance() {
}

SkillMerchandise::SkillMerchandise(const SkillMerchandise& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkillMerchandise)
}

void SkillMerchandise::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propid_ = 0;
  price_ = 0;
  availabledays_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  foodid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillMerchandise::~SkillMerchandise() {
  // @@protoc_insertion_point(destructor:SkillMerchandise)
  SharedDtor();
}

void SkillMerchandise::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void SkillMerchandise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillMerchandise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillMerchandise_descriptor_;
}

const SkillMerchandise& SkillMerchandise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

SkillMerchandise* SkillMerchandise::default_instance_ = NULL;

SkillMerchandise* SkillMerchandise::New() const {
  return new SkillMerchandise;
}

void SkillMerchandise::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillMerchandise*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(propid_, price_);
    ZR_(availabledays_, type_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillMerchandise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkillMerchandise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propId;
        break;
      }

      // required int32 propId = 3;
      case 3: {
        if (tag == 24) {
         parse_propId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required int32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_availableDays;
        break;
      }

      // required int32 availableDays = 5;
      case 5: {
        if (tag == 40) {
         parse_availableDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &availabledays_)));
          set_has_availabledays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_foodId;
        break;
      }

      // optional int32 foodId = 7;
      case 7: {
        if (tag == 56) {
         parse_foodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foodid_)));
          set_has_foodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // required int32 type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkillMerchandise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkillMerchandise)
  return false;
#undef DO_
}

void SkillMerchandise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkillMerchandise)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 propId = 3;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->propid(), output);
  }

  // required int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // required int32 availableDays = 5;
  if (has_availabledays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->availabledays(), output);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional int32 foodId = 7;
  if (has_foodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->foodid(), output);
  }

  // required int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkillMerchandise)
}

::google::protobuf::uint8* SkillMerchandise::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkillMerchandise)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 propId = 3;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->propid(), target);
  }

  // required int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // required int32 availableDays = 5;
  if (has_availabledays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->availabledays(), target);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional int32 foodId = 7;
  if (has_foodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->foodid(), target);
  }

  // required int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkillMerchandise)
  return target;
}

int SkillMerchandise::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 propId = 3;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // required int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 availableDays = 5;
    if (has_availabledays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->availabledays());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 foodId = 7;
    if (has_foodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foodid());
    }

    // required int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillMerchandise::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillMerchandise* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillMerchandise*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillMerchandise::MergeFrom(const SkillMerchandise& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_availabledays()) {
      set_availabledays(from.availabledays());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_foodid()) {
      set_foodid(from.foodid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillMerchandise::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillMerchandise::CopyFrom(const SkillMerchandise& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillMerchandise::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  return true;
}

void SkillMerchandise::Swap(SkillMerchandise* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(propid_, other->propid_);
    std::swap(price_, other->price_);
    std::swap(availabledays_, other->availabledays_);
    std::swap(description_, other->description_);
    std::swap(foodid_, other->foodid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillMerchandise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillMerchandise_descriptor_;
  metadata.reflection = SkillMerchandise_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopMerchandiseResponse::kSkinMerchandisesFieldNumber;
const int ShopMerchandiseResponse::kSkillMerchandisesFieldNumber;
#endif  // !_MSC_VER

ShopMerchandiseResponse::ShopMerchandiseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShopMerchandiseResponse)
}

void ShopMerchandiseResponse::InitAsDefaultInstance() {
}

ShopMerchandiseResponse::ShopMerchandiseResponse(const ShopMerchandiseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShopMerchandiseResponse)
}

void ShopMerchandiseResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopMerchandiseResponse::~ShopMerchandiseResponse() {
  // @@protoc_insertion_point(destructor:ShopMerchandiseResponse)
  SharedDtor();
}

void ShopMerchandiseResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopMerchandiseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopMerchandiseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopMerchandiseResponse_descriptor_;
}

const ShopMerchandiseResponse& ShopMerchandiseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

ShopMerchandiseResponse* ShopMerchandiseResponse::default_instance_ = NULL;

ShopMerchandiseResponse* ShopMerchandiseResponse::New() const {
  return new ShopMerchandiseResponse;
}

void ShopMerchandiseResponse::Clear() {
  skinmerchandises_.Clear();
  skillmerchandises_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopMerchandiseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShopMerchandiseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkinMerchandise skinMerchandises = 1;
      case 1: {
        if (tag == 10) {
         parse_skinMerchandises:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skinmerchandises()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skinMerchandises;
        if (input->ExpectTag(18)) goto parse_skillMerchandises;
        break;
      }

      // repeated .SkillMerchandise skillMerchandises = 2;
      case 2: {
        if (tag == 18) {
         parse_skillMerchandises:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillmerchandises()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skillMerchandises;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShopMerchandiseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShopMerchandiseResponse)
  return false;
#undef DO_
}

void ShopMerchandiseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShopMerchandiseResponse)
  // repeated .SkinMerchandise skinMerchandises = 1;
  for (int i = 0; i < this->skinmerchandises_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skinmerchandises(i), output);
  }

  // repeated .SkillMerchandise skillMerchandises = 2;
  for (int i = 0; i < this->skillmerchandises_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillmerchandises(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShopMerchandiseResponse)
}

::google::protobuf::uint8* ShopMerchandiseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShopMerchandiseResponse)
  // repeated .SkinMerchandise skinMerchandises = 1;
  for (int i = 0; i < this->skinmerchandises_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skinmerchandises(i), target);
  }

  // repeated .SkillMerchandise skillMerchandises = 2;
  for (int i = 0; i < this->skillmerchandises_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillmerchandises(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShopMerchandiseResponse)
  return target;
}

int ShopMerchandiseResponse::ByteSize() const {
  int total_size = 0;

  // repeated .SkinMerchandise skinMerchandises = 1;
  total_size += 1 * this->skinmerchandises_size();
  for (int i = 0; i < this->skinmerchandises_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skinmerchandises(i));
  }

  // repeated .SkillMerchandise skillMerchandises = 2;
  total_size += 1 * this->skillmerchandises_size();
  for (int i = 0; i < this->skillmerchandises_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillmerchandises(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopMerchandiseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopMerchandiseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopMerchandiseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopMerchandiseResponse::MergeFrom(const ShopMerchandiseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  skinmerchandises_.MergeFrom(from.skinmerchandises_);
  skillmerchandises_.MergeFrom(from.skillmerchandises_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopMerchandiseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopMerchandiseResponse::CopyFrom(const ShopMerchandiseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopMerchandiseResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->skinmerchandises())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skillmerchandises())) return false;
  return true;
}

void ShopMerchandiseResponse::Swap(ShopMerchandiseResponse* other) {
  if (other != this) {
    skinmerchandises_.Swap(&other->skinmerchandises_);
    skillmerchandises_.Swap(&other->skillmerchandises_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopMerchandiseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopMerchandiseResponse_descriptor_;
  metadata.reflection = ShopMerchandiseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyRequest::kIdFieldNumber;
#endif  // !_MSC_VER

BuyRequest::BuyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BuyRequest)
}

void BuyRequest::InitAsDefaultInstance() {
}

BuyRequest::BuyRequest(const BuyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BuyRequest)
}

void BuyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyRequest::~BuyRequest() {
  // @@protoc_insertion_point(destructor:BuyRequest)
  SharedDtor();
}

void BuyRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BuyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyRequest_descriptor_;
}

const BuyRequest& BuyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

BuyRequest* BuyRequest::default_instance_ = NULL;

BuyRequest* BuyRequest::New() const {
  return new BuyRequest;
}

void BuyRequest::Clear() {
  if (has_id()) {
    if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BuyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BuyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BuyRequest)
  return false;
#undef DO_
}

void BuyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BuyRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BuyRequest)
}

::google::protobuf::uint8* BuyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuyRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuyRequest)
  return target;
}

int BuyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyRequest::MergeFrom(const BuyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyRequest::CopyFrom(const BuyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuyRequest::Swap(BuyRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyRequest_descriptor_;
  metadata.reflection = BuyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserChangedResponse::kUserInfoFieldNumber;
#endif  // !_MSC_VER

UserChangedResponse::UserChangedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserChangedResponse)
}

void UserChangedResponse::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

UserChangedResponse::UserChangedResponse(const UserChangedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserChangedResponse)
}

void UserChangedResponse::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChangedResponse::~UserChangedResponse() {
  // @@protoc_insertion_point(destructor:UserChangedResponse)
  SharedDtor();
}

void UserChangedResponse::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void UserChangedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChangedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChangedResponse_descriptor_;
}

const UserChangedResponse& UserChangedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

UserChangedResponse* UserChangedResponse::default_instance_ = NULL;

UserChangedResponse* UserChangedResponse::New() const {
  return new UserChangedResponse;
}

void UserChangedResponse::Clear() {
  if (has_userinfo()) {
    if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserChangedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserChangedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserInfo userInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserChangedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserChangedResponse)
  return false;
#undef DO_
}

void UserChangedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserChangedResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserChangedResponse)
}

::google::protobuf::uint8* UserChangedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserChangedResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserChangedResponse)
  return target;
}

int UserChangedResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserInfo userInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChangedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserChangedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserChangedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserChangedResponse::MergeFrom(const UserChangedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserChangedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChangedResponse::CopyFrom(const UserChangedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangedResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void UserChangedResponse::Swap(UserChangedResponse* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserChangedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChangedResponse_descriptor_;
  metadata.reflection = UserChangedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoResponse::kUserInfoFieldNumber;
#endif  // !_MSC_VER

UserInfoResponse::UserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfoResponse)
}

void UserInfoResponse::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

UserInfoResponse::UserInfoResponse(const UserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserInfoResponse)
}

void UserInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoResponse::~UserInfoResponse() {
  // @@protoc_insertion_point(destructor:UserInfoResponse)
  SharedDtor();
}

void UserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void UserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoResponse_descriptor_;
}

const UserInfoResponse& UserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

UserInfoResponse* UserInfoResponse::default_instance_ = NULL;

UserInfoResponse* UserInfoResponse::New() const {
  return new UserInfoResponse;
}

void UserInfoResponse::Clear() {
  if (has_userinfo()) {
    if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserInfo userInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserInfoResponse)
  return false;
#undef DO_
}

void UserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserInfoResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UserInfoResponse)
}

::google::protobuf::uint8* UserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfoResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfoResponse)
  return target;
}

int UserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserInfo userInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoResponse::MergeFrom(const UserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoResponse::CopyFrom(const UserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void UserInfoResponse::Swap(UserInfoResponse* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoResponse_descriptor_;
  metadata.reflection = UserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UltimateSkill::kIdFieldNumber;
const int UltimateSkill::kFoodIdFieldNumber;
#endif  // !_MSC_VER

UltimateSkill::UltimateSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UltimateSkill)
}

void UltimateSkill::InitAsDefaultInstance() {
}

UltimateSkill::UltimateSkill(const UltimateSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UltimateSkill)
}

void UltimateSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  foodid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UltimateSkill::~UltimateSkill() {
  // @@protoc_insertion_point(destructor:UltimateSkill)
  SharedDtor();
}

void UltimateSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UltimateSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UltimateSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UltimateSkill_descriptor_;
}

const UltimateSkill& UltimateSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

UltimateSkill* UltimateSkill::default_instance_ = NULL;

UltimateSkill* UltimateSkill::New() const {
  return new UltimateSkill;
}

void UltimateSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UltimateSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, foodid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UltimateSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UltimateSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_foodId;
        break;
      }

      // optional int32 foodId = 2;
      case 2: {
        if (tag == 16) {
         parse_foodId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &foodid_)));
          set_has_foodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UltimateSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UltimateSkill)
  return false;
#undef DO_
}

void UltimateSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UltimateSkill)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 foodId = 2;
  if (has_foodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->foodid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UltimateSkill)
}

::google::protobuf::uint8* UltimateSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UltimateSkill)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 foodId = 2;
  if (has_foodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->foodid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UltimateSkill)
  return target;
}

int UltimateSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 foodId = 2;
    if (has_foodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->foodid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UltimateSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UltimateSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UltimateSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UltimateSkill::MergeFrom(const UltimateSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_foodid()) {
      set_foodid(from.foodid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UltimateSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltimateSkill::CopyFrom(const UltimateSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltimateSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UltimateSkill::Swap(UltimateSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(foodid_, other->foodid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UltimateSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UltimateSkill_descriptor_;
  metadata.reflection = UltimateSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivilegeResponse::kTypeFieldNumber;
const int PrivilegeResponse::kStaminaFieldNumber;
const int PrivilegeResponse::kCountdownFieldNumber;
const int PrivilegeResponse::kPrivilegesFieldNumber;
#endif  // !_MSC_VER

PrivilegeResponse::PrivilegeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivilegeResponse)
}

void PrivilegeResponse::InitAsDefaultInstance() {
}

PrivilegeResponse::PrivilegeResponse(const PrivilegeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PrivilegeResponse)
}

void PrivilegeResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  stamina_ = 0;
  countdown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivilegeResponse::~PrivilegeResponse() {
  // @@protoc_insertion_point(destructor:PrivilegeResponse)
  SharedDtor();
}

void PrivilegeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrivilegeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivilegeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivilegeResponse_descriptor_;
}

const PrivilegeResponse& PrivilegeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PrivilegeResponse* PrivilegeResponse::default_instance_ = NULL;

PrivilegeResponse* PrivilegeResponse::New() const {
  return new PrivilegeResponse;
}

void PrivilegeResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrivilegeResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, stamina_);
    countdown_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  privileges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivilegeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivilegeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stamina;
        break;
      }

      // optional int32 stamina = 2;
      case 2: {
        if (tag == 16) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_countdown;
        break;
      }

      // optional int32 countdown = 3;
      case 3: {
        if (tag == 24) {
         parse_countdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdown_)));
          set_has_countdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_privileges;
        break;
      }

      // repeated .Privilege privileges = 4;
      case 4: {
        if (tag == 34) {
         parse_privileges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privileges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_privileges;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivilegeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivilegeResponse)
  return false;
#undef DO_
}

void PrivilegeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivilegeResponse)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 stamina = 2;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stamina(), output);
  }

  // optional int32 countdown = 3;
  if (has_countdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countdown(), output);
  }

  // repeated .Privilege privileges = 4;
  for (int i = 0; i < this->privileges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->privileges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PrivilegeResponse)
}

::google::protobuf::uint8* PrivilegeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PrivilegeResponse)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 stamina = 2;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stamina(), target);
  }

  // optional int32 countdown = 3;
  if (has_countdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countdown(), target);
  }

  // repeated .Privilege privileges = 4;
  for (int i = 0; i < this->privileges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->privileges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrivilegeResponse)
  return target;
}

int PrivilegeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 stamina = 2;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // optional int32 countdown = 3;
    if (has_countdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdown());
    }

  }
  // repeated .Privilege privileges = 4;
  total_size += 1 * this->privileges_size();
  for (int i = 0; i < this->privileges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privileges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivilegeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivilegeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivilegeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivilegeResponse::MergeFrom(const PrivilegeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  privileges_.MergeFrom(from.privileges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_countdown()) {
      set_countdown(from.countdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivilegeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivilegeResponse::CopyFrom(const PrivilegeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivilegeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->privileges())) return false;
  return true;
}

void PrivilegeResponse::Swap(PrivilegeResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(stamina_, other->stamina_);
    std::swap(countdown_, other->countdown_);
    privileges_.Swap(&other->privileges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivilegeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivilegeResponse_descriptor_;
  metadata.reflection = PrivilegeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Privilege::kIdFieldNumber;
const int Privilege::kNameFieldNumber;
const int Privilege::kTypeFieldNumber;
const int Privilege::kOrgPriceFieldNumber;
const int Privilege::kPriceFieldNumber;
const int Privilege::kGoldFieldNumber;
const int Privilege::kIconFieldNumber;
const int Privilege::kPosterFieldNumber;
#endif  // !_MSC_VER

Privilege::Privilege()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Privilege)
}

void Privilege::InitAsDefaultInstance() {
}

Privilege::Privilege(const Privilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Privilege)
}

void Privilege::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  orgprice_ = 0;
  price_ = 0;
  gold_ = 0;
  icon_ = 0;
  poster_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Privilege::~Privilege() {
  // @@protoc_insertion_point(destructor:Privilege)
  SharedDtor();
}

void Privilege::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (poster_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete poster_;
  }
  if (this != default_instance_) {
  }
}

void Privilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Privilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Privilege_descriptor_;
}

const Privilege& Privilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Privilege* Privilege::default_instance_ = NULL;

Privilege* Privilege::New() const {
  return new Privilege;
}

void Privilege::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Privilege*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, gold_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    icon_ = 0;
    if (has_poster()) {
      if (poster_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        poster_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Privilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Privilege)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orgPrice;
        break;
      }

      // optional int32 orgPrice = 4;
      case 4: {
        if (tag == 32) {
         parse_orgPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orgprice_)));
          set_has_orgprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // required int32 price = 5;
      case 5: {
        if (tag == 40) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional int32 gold = 6;
      case 6: {
        if (tag == 48) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_icon;
        break;
      }

      // optional int32 icon = 7;
      case 7: {
        if (tag == 56) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_poster;
        break;
      }

      // optional string poster = 8;
      case 8: {
        if (tag == 66) {
         parse_poster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->poster().data(), this->poster().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "poster");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Privilege)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Privilege)
  return false;
#undef DO_
}

void Privilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Privilege)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 orgPrice = 4;
  if (has_orgprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orgprice(), output);
  }

  // required int32 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price(), output);
  }

  // optional int32 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // optional int32 icon = 7;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->icon(), output);
  }

  // optional string poster = 8;
  if (has_poster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poster().data(), this->poster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->poster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Privilege)
}

::google::protobuf::uint8* Privilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Privilege)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 orgPrice = 4;
  if (has_orgprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orgprice(), target);
  }

  // required int32 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price(), target);
  }

  // optional int32 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold(), target);
  }

  // optional int32 icon = 7;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->icon(), target);
  }

  // optional string poster = 8;
  if (has_poster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poster().data(), this->poster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->poster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Privilege)
  return target;
}

int Privilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 orgPrice = 4;
    if (has_orgprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orgprice());
    }

    // required int32 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 icon = 7;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }

    // optional string poster = 8;
    if (has_poster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Privilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Privilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Privilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Privilege::MergeFrom(const Privilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_orgprice()) {
      set_orgprice(from.orgprice());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_poster()) {
      set_poster(from.poster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Privilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Privilege::CopyFrom(const Privilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Privilege::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void Privilege::Swap(Privilege* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(orgprice_, other->orgprice_);
    std::swap(price_, other->price_);
    std::swap(gold_, other->gold_);
    std::swap(icon_, other->icon_);
    std::swap(poster_, other->poster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Privilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Privilege_descriptor_;
  metadata.reflection = Privilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthorizationRequest::kUserPayIdFieldNumber;
#endif  // !_MSC_VER

AuthorizationRequest::AuthorizationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthorizationRequest)
}

void AuthorizationRequest::InitAsDefaultInstance() {
}

AuthorizationRequest::AuthorizationRequest(const AuthorizationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthorizationRequest)
}

void AuthorizationRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userpayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorizationRequest::~AuthorizationRequest() {
  // @@protoc_insertion_point(destructor:AuthorizationRequest)
  SharedDtor();
}

void AuthorizationRequest::SharedDtor() {
  if (userpayid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userpayid_;
  }
  if (this != default_instance_) {
  }
}

void AuthorizationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthorizationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizationRequest_descriptor_;
}

const AuthorizationRequest& AuthorizationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

AuthorizationRequest* AuthorizationRequest::default_instance_ = NULL;

AuthorizationRequest* AuthorizationRequest::New() const {
  return new AuthorizationRequest;
}

void AuthorizationRequest::Clear() {
  if (has_userpayid()) {
    if (userpayid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      userpayid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthorizationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuthorizationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userPayId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpayid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpayid().data(), this->userpayid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userpayid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthorizationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthorizationRequest)
  return false;
#undef DO_
}

void AuthorizationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthorizationRequest)
  // required string userPayId = 1;
  if (has_userpayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpayid().data(), this->userpayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpayid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userpayid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AuthorizationRequest)
}

::google::protobuf::uint8* AuthorizationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthorizationRequest)
  // required string userPayId = 1;
  if (has_userpayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpayid().data(), this->userpayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userpayid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userpayid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthorizationRequest)
  return target;
}

int AuthorizationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userPayId = 1;
    if (has_userpayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpayid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthorizationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthorizationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthorizationRequest::MergeFrom(const AuthorizationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userpayid()) {
      set_userpayid(from.userpayid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthorizationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizationRequest::CopyFrom(const AuthorizationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthorizationRequest::Swap(AuthorizationRequest* other) {
  if (other != this) {
    std::swap(userpayid_, other->userpayid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthorizationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthorizationRequest_descriptor_;
  metadata.reflection = AuthorizationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthorizationResponse::kUserInfoFieldNumber;
#endif  // !_MSC_VER

AuthorizationResponse::AuthorizationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthorizationResponse)
}

void AuthorizationResponse::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

AuthorizationResponse::AuthorizationResponse(const AuthorizationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthorizationResponse)
}

void AuthorizationResponse::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorizationResponse::~AuthorizationResponse() {
  // @@protoc_insertion_point(destructor:AuthorizationResponse)
  SharedDtor();
}

void AuthorizationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void AuthorizationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthorizationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizationResponse_descriptor_;
}

const AuthorizationResponse& AuthorizationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

AuthorizationResponse* AuthorizationResponse::default_instance_ = NULL;

AuthorizationResponse* AuthorizationResponse::New() const {
  return new AuthorizationResponse;
}

void AuthorizationResponse::Clear() {
  if (has_userinfo()) {
    if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthorizationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuthorizationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UserInfo userInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthorizationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthorizationResponse)
  return false;
#undef DO_
}

void AuthorizationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthorizationResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AuthorizationResponse)
}

::google::protobuf::uint8* AuthorizationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuthorizationResponse)
  // required .UserInfo userInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthorizationResponse)
  return target;
}

int AuthorizationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UserInfo userInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthorizationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthorizationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthorizationResponse::MergeFrom(const AuthorizationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthorizationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizationResponse::CopyFrom(const AuthorizationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void AuthorizationResponse::Swap(AuthorizationResponse* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthorizationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthorizationResponse_descriptor_;
  metadata.reflection = AuthorizationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayOrderRequest::kTypeFieldNumber;
const int PayOrderRequest::kGoodsIdFieldNumber;
#endif  // !_MSC_VER

PayOrderRequest::PayOrderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PayOrderRequest)
}

void PayOrderRequest::InitAsDefaultInstance() {
}

PayOrderRequest::PayOrderRequest(const PayOrderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PayOrderRequest)
}

void PayOrderRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goodsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOrderRequest::~PayOrderRequest() {
  // @@protoc_insertion_point(destructor:PayOrderRequest)
  SharedDtor();
}

void PayOrderRequest::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (goodsid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete goodsid_;
  }
  if (this != default_instance_) {
  }
}

void PayOrderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayOrderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayOrderRequest_descriptor_;
}

const PayOrderRequest& PayOrderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PayOrderRequest* PayOrderRequest::default_instance_ = NULL;

PayOrderRequest* PayOrderRequest::New() const {
  return new PayOrderRequest;
}

void PayOrderRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_goodsid()) {
      if (goodsid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        goodsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PayOrderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goodsId;
        break;
      }

      // required string goodsId = 2;
      case 2: {
        if (tag == 18) {
         parse_goodsId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goodsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->goodsid().data(), this->goodsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "goodsid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PayOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PayOrderRequest)
  return false;
#undef DO_
}

void PayOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PayOrderRequest)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string goodsId = 2;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsid().data(), this->goodsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->goodsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PayOrderRequest)
}

::google::protobuf::uint8* PayOrderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PayOrderRequest)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string goodsId = 2;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->goodsid().data(), this->goodsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "goodsid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->goodsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PayOrderRequest)
  return target;
}

int PayOrderRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string goodsId = 2;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goodsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayOrderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayOrderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayOrderRequest::MergeFrom(const PayOrderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayOrderRequest::CopyFrom(const PayOrderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOrderRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayOrderRequest::Swap(PayOrderRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayOrderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayOrderRequest_descriptor_;
  metadata.reflection = PayOrderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayOrderResponse::kOrderIdFieldNumber;
const int PayOrderResponse::kPriceFieldNumber;
const int PayOrderResponse::kOrderParamFieldNumber;
const int PayOrderResponse::kContinueTypeFieldNumber;
#endif  // !_MSC_VER

PayOrderResponse::PayOrderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PayOrderResponse)
}

void PayOrderResponse::InitAsDefaultInstance() {
  orderparam_ = const_cast< ::OrderParam*>(&::OrderParam::default_instance());
}

PayOrderResponse::PayOrderResponse(const PayOrderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PayOrderResponse)
}

void PayOrderResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  orderparam_ = NULL;
  continuetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOrderResponse::~PayOrderResponse() {
  // @@protoc_insertion_point(destructor:PayOrderResponse)
  SharedDtor();
}

void PayOrderResponse::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (this != default_instance_) {
    delete orderparam_;
  }
}

void PayOrderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayOrderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayOrderResponse_descriptor_;
}

const PayOrderResponse& PayOrderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PayOrderResponse* PayOrderResponse::default_instance_ = NULL;

PayOrderResponse* PayOrderResponse::New() const {
  return new PayOrderResponse;
}

void PayOrderResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PayOrderResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(price_, continuetype_);
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderid_->clear();
      }
    }
    if (has_orderparam()) {
      if (orderparam_ != NULL) orderparam_->::OrderParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PayOrderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string orderId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orderParam;
        break;
      }

      // required .OrderParam orderParam = 3;
      case 3: {
        if (tag == 26) {
         parse_orderParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orderparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_continueType;
        break;
      }

      // optional int32 continueType = 4;
      case 4: {
        if (tag == 32) {
         parse_continueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuetype_)));
          set_has_continuetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PayOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PayOrderResponse)
  return false;
#undef DO_
}

void PayOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PayOrderResponse)
  // required string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // required int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // required .OrderParam orderParam = 3;
  if (has_orderparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->orderparam(), output);
  }

  // optional int32 continueType = 4;
  if (has_continuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->continuetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PayOrderResponse)
}

::google::protobuf::uint8* PayOrderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PayOrderResponse)
  // required string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // required int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // required .OrderParam orderParam = 3;
  if (has_orderparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->orderparam(), target);
  }

  // optional int32 continueType = 4;
  if (has_continuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->continuetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PayOrderResponse)
  return target;
}

int PayOrderResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string orderId = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required .OrderParam orderParam = 3;
    if (has_orderparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orderparam());
    }

    // optional int32 continueType = 4;
    if (has_continuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayOrderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayOrderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayOrderResponse::MergeFrom(const PayOrderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_orderparam()) {
      mutable_orderparam()->::OrderParam::MergeFrom(from.orderparam());
    }
    if (from.has_continuetype()) {
      set_continuetype(from.continuetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayOrderResponse::CopyFrom(const PayOrderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOrderResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PayOrderResponse::Swap(PayOrderResponse* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(price_, other->price_);
    std::swap(orderparam_, other->orderparam_);
    std::swap(continuetype_, other->continuetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayOrderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayOrderResponse_descriptor_;
  metadata.reflection = PayOrderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderParam::kNameFieldNumber;
const int OrderParam::kUnicomFeeIdFieldNumber;
const int OrderParam::kUnicomProductIdFieldNumber;
const int OrderParam::kAliFeeIdFieldNumber;
const int OrderParam::kWeixinFeeIdFieldNumber;
const int OrderParam::kNotifyFieldNumber;
#endif  // !_MSC_VER

OrderParam::OrderParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OrderParam)
}

void OrderParam::InitAsDefaultInstance() {
}

OrderParam::OrderParam(const OrderParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OrderParam)
}

void OrderParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unicomfeeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unicomproductid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alifeeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weixinfeeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderParam::~OrderParam() {
  // @@protoc_insertion_point(destructor:OrderParam)
  SharedDtor();
}

void OrderParam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (unicomfeeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unicomfeeid_;
  }
  if (unicomproductid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unicomproductid_;
  }
  if (alifeeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alifeeid_;
  }
  if (weixinfeeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete weixinfeeid_;
  }
  if (this != default_instance_) {
  }
}

void OrderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderParam_descriptor_;
}

const OrderParam& OrderParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

OrderParam* OrderParam::default_instance_ = NULL;

OrderParam* OrderParam::New() const {
  return new OrderParam;
}

void OrderParam::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_unicomfeeid()) {
      if (unicomfeeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unicomfeeid_->clear();
      }
    }
    if (has_unicomproductid()) {
      if (unicomproductid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unicomproductid_->clear();
      }
    }
    if (has_alifeeid()) {
      if (alifeeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alifeeid_->clear();
      }
    }
    if (has_weixinfeeid()) {
      if (weixinfeeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        weixinfeeid_->clear();
      }
    }
    notify_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OrderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unicomFeeId;
        break;
      }

      // optional string unicomFeeId = 2;
      case 2: {
        if (tag == 18) {
         parse_unicomFeeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unicomfeeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unicomfeeid().data(), this->unicomfeeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unicomfeeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unicomProductId;
        break;
      }

      // optional string unicomProductId = 3;
      case 3: {
        if (tag == 26) {
         parse_unicomProductId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unicomproductid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unicomproductid().data(), this->unicomproductid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unicomproductid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_aliFeeId;
        break;
      }

      // optional string aliFeeId = 4;
      case 4: {
        if (tag == 34) {
         parse_aliFeeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alifeeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alifeeid().data(), this->alifeeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alifeeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weixinFeeId;
        break;
      }

      // optional string weixinFeeId = 5;
      case 5: {
        if (tag == 42) {
         parse_weixinFeeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weixinfeeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weixinfeeid().data(), this->weixinfeeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "weixinfeeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_notify;
        break;
      }

      // optional bool notify = 6;
      case 6: {
        if (tag == 48) {
         parse_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OrderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OrderParam)
  return false;
#undef DO_
}

void OrderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OrderParam)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string unicomFeeId = 2;
  if (has_unicomfeeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unicomfeeid().data(), this->unicomfeeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unicomfeeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unicomfeeid(), output);
  }

  // optional string unicomProductId = 3;
  if (has_unicomproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unicomproductid().data(), this->unicomproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unicomproductid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unicomproductid(), output);
  }

  // optional string aliFeeId = 4;
  if (has_alifeeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alifeeid().data(), this->alifeeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alifeeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alifeeid(), output);
  }

  // optional string weixinFeeId = 5;
  if (has_weixinfeeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weixinfeeid().data(), this->weixinfeeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weixinfeeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->weixinfeeid(), output);
  }

  // optional bool notify = 6;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OrderParam)
}

::google::protobuf::uint8* OrderParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OrderParam)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string unicomFeeId = 2;
  if (has_unicomfeeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unicomfeeid().data(), this->unicomfeeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unicomfeeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unicomfeeid(), target);
  }

  // optional string unicomProductId = 3;
  if (has_unicomproductid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unicomproductid().data(), this->unicomproductid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unicomproductid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unicomproductid(), target);
  }

  // optional string aliFeeId = 4;
  if (has_alifeeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alifeeid().data(), this->alifeeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alifeeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alifeeid(), target);
  }

  // optional string weixinFeeId = 5;
  if (has_weixinfeeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weixinfeeid().data(), this->weixinfeeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weixinfeeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weixinfeeid(), target);
  }

  // optional bool notify = 6;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrderParam)
  return target;
}

int OrderParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string unicomFeeId = 2;
    if (has_unicomfeeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unicomfeeid());
    }

    // optional string unicomProductId = 3;
    if (has_unicomproductid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unicomproductid());
    }

    // optional string aliFeeId = 4;
    if (has_alifeeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alifeeid());
    }

    // optional string weixinFeeId = 5;
    if (has_weixinfeeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weixinfeeid());
    }

    // optional bool notify = 6;
    if (has_notify()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderParam::MergeFrom(const OrderParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_unicomfeeid()) {
      set_unicomfeeid(from.unicomfeeid());
    }
    if (from.has_unicomproductid()) {
      set_unicomproductid(from.unicomproductid());
    }
    if (from.has_alifeeid()) {
      set_alifeeid(from.alifeeid());
    }
    if (from.has_weixinfeeid()) {
      set_weixinfeeid(from.weixinfeeid());
    }
    if (from.has_notify()) {
      set_notify(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderParam::CopyFrom(const OrderParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderParam::IsInitialized() const {

  return true;
}

void OrderParam::Swap(OrderParam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(unicomfeeid_, other->unicomfeeid_);
    std::swap(unicomproductid_, other->unicomproductid_);
    std::swap(alifeeid_, other->alifeeid_);
    std::swap(weixinfeeid_, other->weixinfeeid_);
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderParam_descriptor_;
  metadata.reflection = OrderParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayResultRequest::kTypeFieldNumber;
const int PayResultRequest::kOrderIdFieldNumber;
const int PayResultRequest::kOrderStatusFieldNumber;
#endif  // !_MSC_VER

PayResultRequest::PayResultRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PayResultRequest)
}

void PayResultRequest::InitAsDefaultInstance() {
}

PayResultRequest::PayResultRequest(const PayResultRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PayResultRequest)
}

void PayResultRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayResultRequest::~PayResultRequest() {
  // @@protoc_insertion_point(destructor:PayResultRequest)
  SharedDtor();
}

void PayResultRequest::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (orderstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderstatus_;
  }
  if (this != default_instance_) {
  }
}

void PayResultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayResultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayResultRequest_descriptor_;
}

const PayResultRequest& PayResultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PayResultRequest* PayResultRequest::default_instance_ = NULL;

PayResultRequest* PayResultRequest::New() const {
  return new PayResultRequest;
}

void PayResultRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderid_->clear();
      }
    }
    if (has_orderstatus()) {
      if (orderstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderstatus_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayResultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PayResultRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orderId;
        break;
      }

      // required string orderId = 2;
      case 2: {
        if (tag == 18) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orderStatus;
        break;
      }

      // required string orderStatus = 3;
      case 3: {
        if (tag == 26) {
         parse_orderStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderstatus().data(), this->orderstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderstatus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PayResultRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PayResultRequest)
  return false;
#undef DO_
}

void PayResultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PayResultRequest)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string orderId = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderid(), output);
  }

  // required string orderStatus = 3;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderstatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orderstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PayResultRequest)
}

::google::protobuf::uint8* PayResultRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PayResultRequest)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string orderId = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderid(), target);
  }

  // required string orderStatus = 3;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderstatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PayResultRequest)
  return target;
}

int PayResultRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string orderId = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required string orderStatus = 3;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayResultRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayResultRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayResultRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayResultRequest::MergeFrom(const PayResultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayResultRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayResultRequest::CopyFrom(const PayResultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayResultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PayResultRequest::Swap(PayResultRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(orderid_, other->orderid_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayResultRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayResultRequest_descriptor_;
  metadata.reflection = PayResultRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayResultResponse::kOrderIdFieldNumber;
const int PayResultResponse::kOrderStatusFieldNumber;
const int PayResultResponse::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PayResultResponse::PayResultResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PayResultResponse)
}

void PayResultResponse::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
}

PayResultResponse::PayResultResponse(const PayResultResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PayResultResponse)
}

void PayResultResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayResultResponse::~PayResultResponse() {
  // @@protoc_insertion_point(destructor:PayResultResponse)
  SharedDtor();
}

void PayResultResponse::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (orderstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderstatus_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void PayResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayResultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayResultResponse_descriptor_;
}

const PayResultResponse& PayResultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

PayResultResponse* PayResultResponse::default_instance_ = NULL;

PayResultResponse* PayResultResponse::New() const {
  return new PayResultResponse;
}

void PayResultResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderid_->clear();
      }
    }
    if (has_orderstatus()) {
      if (orderstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderstatus_->clear();
      }
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PayResultResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string orderId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orderStatus;
        break;
      }

      // required string orderStatus = 2;
      case 2: {
        if (tag == 18) {
         parse_orderStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderstatus().data(), this->orderstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderstatus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userInfo;
        break;
      }

      // optional .UserInfo userInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PayResultResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PayResultResponse)
  return false;
#undef DO_
}

void PayResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PayResultResponse)
  // required string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // required string orderStatus = 2;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderstatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderstatus(), output);
  }

  // optional .UserInfo userInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PayResultResponse)
}

::google::protobuf::uint8* PayResultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PayResultResponse)
  // required string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // required string orderStatus = 2;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderstatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderstatus(), target);
  }

  // optional .UserInfo userInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PayResultResponse)
  return target;
}

int PayResultResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string orderId = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required string orderStatus = 2;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderstatus());
    }

    // optional .UserInfo userInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayResultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayResultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayResultResponse::MergeFrom(const PayResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayResultResponse::CopyFrom(const PayResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayResultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void PayResultResponse::Swap(PayResultResponse* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayResultResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayResultResponse_descriptor_;
  metadata.reflection = PayResultResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoldCoinListRequest::kPageFieldNumber;
const int GoldCoinListRequest::kLimitFieldNumber;
#endif  // !_MSC_VER

GoldCoinListRequest::GoldCoinListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoldCoinListRequest)
}

void GoldCoinListRequest::InitAsDefaultInstance() {
}

GoldCoinListRequest::GoldCoinListRequest(const GoldCoinListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GoldCoinListRequest)
}

void GoldCoinListRequest::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoldCoinListRequest::~GoldCoinListRequest() {
  // @@protoc_insertion_point(destructor:GoldCoinListRequest)
  SharedDtor();
}

void GoldCoinListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoldCoinListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoldCoinListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoldCoinListRequest_descriptor_;
}

const GoldCoinListRequest& GoldCoinListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

GoldCoinListRequest* GoldCoinListRequest::default_instance_ = NULL;

GoldCoinListRequest* GoldCoinListRequest::New() const {
  return new GoldCoinListRequest;
}

void GoldCoinListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoldCoinListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(page_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoldCoinListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoldCoinListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 page = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required int32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoldCoinListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoldCoinListRequest)
  return false;
#undef DO_
}

void GoldCoinListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoldCoinListRequest)
  // required int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  // required int32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GoldCoinListRequest)
}

::google::protobuf::uint8* GoldCoinListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoldCoinListRequest)
  // required int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  // required int32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoldCoinListRequest)
  return target;
}

int GoldCoinListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // required int32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoldCoinListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoldCoinListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoldCoinListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoldCoinListRequest::MergeFrom(const GoldCoinListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoldCoinListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoldCoinListRequest::CopyFrom(const GoldCoinListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoldCoinListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GoldCoinListRequest::Swap(GoldCoinListRequest* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoldCoinListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoldCoinListRequest_descriptor_;
  metadata.reflection = GoldCoinListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoldCoinListResponse::kGoldCoinFieldNumber;
#endif  // !_MSC_VER

GoldCoinListResponse::GoldCoinListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoldCoinListResponse)
}

void GoldCoinListResponse::InitAsDefaultInstance() {
}

GoldCoinListResponse::GoldCoinListResponse(const GoldCoinListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GoldCoinListResponse)
}

void GoldCoinListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoldCoinListResponse::~GoldCoinListResponse() {
  // @@protoc_insertion_point(destructor:GoldCoinListResponse)
  SharedDtor();
}

void GoldCoinListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoldCoinListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoldCoinListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoldCoinListResponse_descriptor_;
}

const GoldCoinListResponse& GoldCoinListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

GoldCoinListResponse* GoldCoinListResponse::default_instance_ = NULL;

GoldCoinListResponse* GoldCoinListResponse::New() const {
  return new GoldCoinListResponse;
}

void GoldCoinListResponse::Clear() {
  goldcoin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoldCoinListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoldCoinListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GoldCoin goldCoin = 1;
      case 1: {
        if (tag == 10) {
         parse_goldCoin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldcoin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_goldCoin;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoldCoinListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoldCoinListResponse)
  return false;
#undef DO_
}

void GoldCoinListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoldCoinListResponse)
  // repeated .GoldCoin goldCoin = 1;
  for (int i = 0; i < this->goldcoin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goldcoin(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GoldCoinListResponse)
}

::google::protobuf::uint8* GoldCoinListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoldCoinListResponse)
  // repeated .GoldCoin goldCoin = 1;
  for (int i = 0; i < this->goldcoin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goldcoin(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoldCoinListResponse)
  return target;
}

int GoldCoinListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .GoldCoin goldCoin = 1;
  total_size += 1 * this->goldcoin_size();
  for (int i = 0; i < this->goldcoin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldcoin(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoldCoinListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoldCoinListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoldCoinListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoldCoinListResponse::MergeFrom(const GoldCoinListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  goldcoin_.MergeFrom(from.goldcoin_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoldCoinListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoldCoinListResponse::CopyFrom(const GoldCoinListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoldCoinListResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->goldcoin())) return false;
  return true;
}

void GoldCoinListResponse::Swap(GoldCoinListResponse* other) {
  if (other != this) {
    goldcoin_.Swap(&other->goldcoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoldCoinListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoldCoinListResponse_descriptor_;
  metadata.reflection = GoldCoinListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoldCoin::kIdFieldNumber;
const int GoldCoin::kCanBuyFieldNumber;
const int GoldCoin::kGoldFieldNumber;
const int GoldCoin::kPriceFieldNumber;
const int GoldCoin::kPosterFieldNumber;
#endif  // !_MSC_VER

GoldCoin::GoldCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoldCoin)
}

void GoldCoin::InitAsDefaultInstance() {
}

GoldCoin::GoldCoin(const GoldCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GoldCoin)
}

void GoldCoin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canbuy_ = false;
  gold_ = 0;
  price_ = 0;
  poster_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoldCoin::~GoldCoin() {
  // @@protoc_insertion_point(destructor:GoldCoin)
  SharedDtor();
}

void GoldCoin::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (poster_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete poster_;
  }
  if (this != default_instance_) {
  }
}

void GoldCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoldCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoldCoin_descriptor_;
}

const GoldCoin& GoldCoin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

GoldCoin* GoldCoin::default_instance_ = NULL;

GoldCoin* GoldCoin::New() const {
  return new GoldCoin;
}

void GoldCoin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoldCoin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(canbuy_, gold_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    price_ = 0;
    if (has_poster()) {
      if (poster_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        poster_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoldCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoldCoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_canBuy;
        break;
      }

      // required bool canBuy = 2;
      case 2: {
        if (tag == 16) {
         parse_canBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbuy_)));
          set_has_canbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int32 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // optional int32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_poster;
        break;
      }

      // optional string poster = 6;
      case 6: {
        if (tag == 50) {
         parse_poster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->poster().data(), this->poster().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "poster");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoldCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoldCoin)
  return false;
#undef DO_
}

void GoldCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoldCoin)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required bool canBuy = 2;
  if (has_canbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->canbuy(), output);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // optional int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }

  // optional string poster = 6;
  if (has_poster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poster().data(), this->poster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->poster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GoldCoin)
}

::google::protobuf::uint8* GoldCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GoldCoin)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required bool canBuy = 2;
  if (has_canbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->canbuy(), target);
  }

  // optional int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  // optional int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }

  // optional string poster = 6;
  if (has_poster()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poster().data(), this->poster().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "poster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->poster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoldCoin)
  return target;
}

int GoldCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required bool canBuy = 2;
    if (has_canbuy()) {
      total_size += 1 + 1;
    }

    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string poster = 6;
    if (has_poster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoldCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoldCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoldCoin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoldCoin::MergeFrom(const GoldCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_canbuy()) {
      set_canbuy(from.canbuy());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_poster()) {
      set_poster(from.poster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoldCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoldCoin::CopyFrom(const GoldCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoldCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GoldCoin::Swap(GoldCoin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(canbuy_, other->canbuy_);
    std::swap(gold_, other->gold_);
    std::swap(price_, other->price_);
    std::swap(poster_, other->poster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoldCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoldCoin_descriptor_;
  metadata.reflection = GoldCoin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
